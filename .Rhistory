?netVisual_aggregate
png('./figures/cellchat/mouse_stroma_immune/PERIOSTIN_chord.png', width = 1000, height = 1000, res = 300)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'PERIOSTIN', layout = "chord")
dev.off()
png('./figures/cellchat/mouse_stroma_immune/PERIOSTIN_chord.png', width = 2000, height = 2000, res = 300)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'PERIOSTIN', layout = "chord", scale = T)
dev.off()
png('./figures/cellchat/mouse_stroma_immune/PERIOSTIN_chord.png', width = 2000, height = 2000, res = 300)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'PERIOSTIN', layout = "chord", reduce = 1)
dev.off()
png('./figures/cellchat/mouse_stroma_immune/PERIOSTIN_chord.png', width = 2000, height = 2000, res = 300)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'PERIOSTIN', layout = "chord", reduce = -2)
dev.off()
png('./figures/cellchat/mouse_stroma_immune/PERIOSTIN_chord.png', width = 2000, height = 2000, res = 300)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'PERIOSTIN', layout = "chord", reduce = -5)
dev.off()
# Chord diagram
png('./figures/cellchat/mouse_stroma_immune/PERIOSTIN_chord.png', width = 2000, height = 1000, res = 300)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'PERIOSTIN', layout = "chord", reduce = -5)
dev.off()
png('./figures/cellchat/mouse_stroma_immune/PERIOSTIN_chord.png', width = 3000, height = 2000, res = 300)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'PERIOSTIN', layout = "chord", reduce = -5)
dev.off()
png('./figures/cellchat/mouse_stroma_immune/PERIOSTIN_chord.png', width = 3500, height = 1000, res = 300)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'PERIOSTIN', layout = "chord")
dev.off()
png('./figures/cellchat/mouse_stroma_immune/PERIOSTIN_chord.png', width = 3500, height = 2000, res = 300)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'PERIOSTIN', layout = "chord")
dev.off()
# Chord diagram
png('./figures/cellchat/mouse_stroma_immune/PERIOSTIN_chord.png', width = 2000, height = 3000, res = 300)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'PERIOSTIN', layout = "chord")
dev.off()
png('./figures/cellchat/mouse_stroma_immune/PERIOSTIN_chord.png', width = 2000, height = 2000, res = 300, title.space	= 0)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'PERIOSTIN', layout = "chord")
dev.off()
png('./figures/cellchat/mouse_stroma_immune/PERIOSTIN_chord.png', width = 2000, height = 2000, res = 300)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'PERIOSTIN', layout = "chord", title.space	= 0)
dev.off()
png('./figures/cellchat/mouse_stroma_immune/PERIOSTIN_chord.png', width = 2000, height = 2000, res = 300)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'PERIOSTIN', layout = "chord", title.space	= 0)
dev.off()
png('./figures/cellchat/mouse_stroma_immune/PERIOSTIN_chord.png', width = 2000, height = 2000, res = 300)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'PERIOSTIN', layout = "chord", title.space	= 0)
dev.off()
?netVisual_chord_cell
netVisual_chord_cell(cellchat_mouse_stroma_immune, signaling = 'PERIOSTIN')
png('./figures/cellchat/mouse_stroma_immune/PERIOSTIN_chord2.png', width = 2000, height = 2000, res = 300)
netVisual_chord_cell(cellchat_mouse_stroma_immune, signaling = 'PERIOSTIN')
dev.off()
levels(cellchat_mouse_stroma_immune@idents)
png('./figures/cellchat/mouse_stroma_immune/PERIOSTIN_chord2.png', width = 2000, height = 2000, res = 300)
netVisual_chord_gene(cellchat_mouse_stroma_immune, sources.use = c(6:8), lab.cex = 0.5,legend.pos.y = 30)
dev.off()
png('./figures/cellchat/mouse_stroma_immune/PERIOSTIN_chord2.png', width = 2000, height = 2000, res = 300)
netVisual_chord_gene(cellchat_mouse_stroma_immune, sources.use = c(6:8), targets.use = c(0,1,2), lab.cex = 0.5,legend.pos.y = 30)
dev.off()
png('./figures/cellchat/mouse_stroma_immune/PERIOSTIN_chord2.png', width = 2000, height = 2000, res = 300)
netVisual_chord_gene(cellchat_mouse_stroma_immune, sources.use = c(6,8), targets.use = c(0,1), lab.cex = 0.5,legend.pos.y = 30)
dev.off()
?netVisual_chord_gene
png('./figures/cellchat/mouse_stroma_immune/PERIOSTIN_chord2.png', width = 2000, height = 2000, res = 300)
netVisual_chord_gene(cellchat_mouse_stroma_immune, sources.use = c(6,8), targets.use = c(0,1), lab.cex = 0.5,legend.pos.y = 30, lab.cex = 0.5)
dev.off()
png('./figures/cellchat/mouse_stroma_immune/PERIOSTIN_chord2.png', width = 2000, height = 2000, res = 300)
netVisual_chord_gene(cellchat_mouse_stroma_immune, sources.use = c(6,8), targets.use = c(0,1), lab.cex = 0.4, legend.pos.y = 30)
dev.off()
png('./figures/cellchat/mouse_stroma_immune/PERIOSTIN_chord2.png', width = 3000, height = 3000, res = 300)
netVisual_chord_gene(cellchat_mouse_stroma_immune, sources.use = c(6,8), targets.use = c(0,1), lab.cex = 0.4, legend.pos.y = 30)
dev.off()
png('./figures/cellchat/mouse_stroma_immune/Wnt_chord.png', width = 2000, height = 2000, res = 300)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'WNT', layout = "chord", title.space	= 0)
dev.off()
png('./figures/cellchat/mouse_stroma_immune/PERIOSTIN_chord2.png', width = 3000, height = 3000, res = 300)
netVisual_chord_gene(cellchat_mouse_stroma_immune, signaling = 'PERIOSTIN', sources.use = c(6,8), targets.use = c(0,1), lab.cex = 0.4, legend.pos.y = 30)
dev.off()
png('./figures/cellchat/mouse_stroma_immune/PERIOSTIN_chord2.png', width = 3000, height = 3000, res = 300)
netVisual_chord_cell(cellchat_mouse_stroma_immune, signaling = 'PERIOSTIN', sources.use = c(6,8), targets.use = c(0,1), lab.cex = 0.4, legend.pos.y = 30)
dev.off()
png('./figures/cellchat/mouse_stroma_immune/ncWnt_chord.png', width = 2000, height = 2000, res = 300)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'ncWNT', layout = "chord", title.space	= 0)
dev.off()
png('./figures/cellchat/mouse_stroma_immune/CCL_chord.png', width = 2000, height = 2000, res = 300)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'CCL', layout = "chord", title.space	= 0)
dev.off()
png('./figures/cellchat/mouse_stroma_immune/CD96_chord.png', width = 2000, height = 2000, res = 300)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'CD96', layout = "chord", title.space	= 0)
dev.off()
png('./figures/cellchat/mouse_stroma_immune/CD137_chord.png', width = 2000, height = 2000, res = 300)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'CD137', layout = "chord", title.space	= 0)
dev.off()
png('./figures/cellchat/mouse_stroma_immune/CD226_chord.png', width = 2000, height = 2000, res = 300)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'CD226', layout = "chord", title.space	= 0)
dev.off()
png('./figures/cellchat/mouse_stroma_immune/Complement_chord.png', width = 2000, height = 2000, res = 300)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'COMPLEMENT', layout = "chord", title.space	= 0)
dev.off()
png('./figures/cellchat/mouse_stroma_immune/CXCL_chord.png', width = 2000, height = 2000, res = 300)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'CXCL', layout = "chord", title.space	= 0)
dev.off()
png('./figures/cellchat/mouse_stroma_immune/EGF_chord.png', width = 2000, height = 2000, res = 300)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'EGF', layout = "chord", title.space	= 0)
dev.off()
png('./figures/cellchat/mouse_stroma_immune/IL6_chord.png', width = 2000, height = 2000, res = 300)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'IL6', layout = "chord", title.space	= 0)
dev.off()
png('./figures/cellchat/mouse_stroma_immune/MHC_I_chord.png', width = 2000, height = 2000, res = 300)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'MHC-I', layout = "chord", title.space	= 0)
dev.off()
png('./figures/cellchat/mouse_stroma_immune/MHC_II_chord.png', width = 2000, height = 2000, res = 300)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'MHC-II', layout = "chord", title.space	= 0)
dev.off()
png('./figures/cellchat/mouse_stroma_immune/NOTCH_chord.png', width = 2000, height = 2000, res = 300)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse_stroma_immune, signaling = 'NOTCH', layout = "chord", title.space	= 0)
dev.off()
rm(list = ls())
pkgs <- c(
"Seurat", "SeuratWrappers", "ggplot2", "batchelor",
"dplyr", "optparse", "reshape2", "data.table", "magrittr"
)
lapply(pkgs, function(x) require(package = x, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)) #nolint
options(future.globals.maxSize= 89128960000)
# read the meta data
all_meta <- read.csv('./data/GSE210347/GSE210347_meta.txt')
load('./data/adata_CAFs_normalized.rda')
View(adata_CAFs)
View(all_meta)
# read the meta data
all_meta <- read.delim('./data/GSE210347/GSE210347_meta.txt')
View(all_meta)
# add the metadata (only the cell annotation)
all(colnames(adata_CAFs) == all_meta$Cell)
adata_CAFs <- AddMetaData(
object = adata_CAFs,
metadata = all_meta$Anno,
col.name = 'cell_type'
)
View(all_meta)
View(adata_CAFs)
# save as h5seurat
SaveH5Seurat(adata_CAFs, filename = "data/adata_CAFs.h5seurat")
pkgs <- c(
"Seurat", "SeuratDisk", "SeuratWrappers", "ggplot2", "batchelor",
"dplyr", "optparse", "reshape2", "data.table", "magrittr"
)
lapply(pkgs, function(x) require(package = x, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)) #nolint
# save as h5seurat
SaveH5Seurat(adata_CAFs, filename = "data/adata_CAFs.h5seurat")
# convert to h5ad
Convert("data/adata_CAFs.h5seurat", dest = "h5ad")
# convert to h5ad
Convert("data/adata_CAFs.h5seurat", dest = "h5ad")
rm(list = ls())
pkgs <- c(
"Seurat", "SeuratDisk", "SeuratWrappers", "ggplot2", "batchelor",
"dplyr", "optparse", "reshape2", "data.table", "magrittr"
)
lapply(pkgs, function(x) require(package = x, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)) #nolint
options(future.globals.maxSize= 89128960000)
adata_CAFs <- readRDS("./data/GSE210347/GSE210347_counts.Rds")
adata_CAFs <- CreateSeuratObject(adata_CAFs)
# read the meta data
all_meta <- read.delim('./data/GSE210347/GSE210347_meta.txt')
# add the metadata (only the cell annotation)
all(colnames(adata_CAFs) == all_meta$Cell)
adata_CAFs <- AddMetaData(
object = adata_CAFs,
metadata = all_meta$Anno,
col.name = 'cell_type'
)
# save as h5seurat
SaveH5Seurat(adata_CAFs, filename = "data/adata_CAFs.h5seurat")
# convert to h5ad
Convert("data/adata_CAFs.h5seurat", dest = "h5ad")
rm(list = ls())
# load libraries
library(data.table)
library(Seurat)
library(SeuratDisk)
library(CellChat)
library(patchwork)
library(reticulate)
pkgs <- c(
"Seurat", "SeuratWrappers", "ggplot2", "batchelor", "circlize",
"dplyr", "optparse", "reshape2", "data.table", "magrittr",
"patchwork", "scales", "GSVA", "RColorBrewer", "ggridges", "ggridges",
"clusterProfiler", "survminer", "survminer", "monocle", "tidyverse",
"psych", "ggrepel", "pheatmap", "escape", "multcomp", "agricolae"
)
color_for_use <- c(
"#8F2A47", "#B83A4D", "#D25C52", "#E27E56",
"#ECA86B", "#F4CB85", "#F8E8A2", "#FAF8C7", "#EBF0AF",
"#CEE2A2", "#ABD3A6", "#82C3A5", "#609EB0", "#4C78B1",
"#5C519B"
)
lapply(pkgs, function(x) require(package = x, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE))
library(corrplot)
#######################
# set the active conda environment
use_condaenv(condaenv = "scutils", required = TRUE)
# load the anndata module
ad <- import("anndata", convert = FALSE)
#############################
# load the combined CAFs and mouse h5ad object
adata_all <- ad$read_h5ad("data/adata_all.h5ad")
# access normalized data matrix
adata_all_dataInput <- t(py_to_r(adata_all$X))
range(adata_all_dataInput)
rownames(adata_all_dataInput) <- rownames(py_to_r(adata_all$var))
colnames(adata_all_dataInput) <- rownames(py_to_r(adata_all$obs))
## access meta data
adata_all_metaData <- py_to_r(adata_all$obs)
adata_all_meta <- adata_all_metaData
# some cleaning
#adata_all_meta$cluster <- paste0("c", adata_all_meta$cluster)
#adata_all_meta <- adata_all_meta[!(adata_all_meta$cluster == 'cNA'), ]
adata_all_dataInput <- adata_all_dataInput[, rownames(adata_all_meta)]
adata_all <- CreateSeuratObject(adata_all_dataInput)
adata_all <- AddMetaData(adata_all, adata_all_meta)
table(adata_all$cluster)
# change the active idents
Idents(adata_all) <- adata_all$cluster
## Similarity analysis
col1 <- c(
"#8F2A47", "#B83A4D", "#D25C52", "#E27E56",
"#ECA86B", "#F4CB85", "#F8E8A2", "#FAF8C7", "#EBF0AF",
"#CEE2A2", "#ABD3A6", "#82C3A5", "#609EB0", "#4C78B1",
"#5C519B"
)
simi <- function(x) {
Object_Select <- subset(adata_all, ident = x)
Object_Select <- FindVariableFeatures(
Object_Select,
selection.method = "vst", nfeatures = 5000
)
Expr_Matrix <- as.data.frame(t(
as.data.frame(
Object_Select@assays$RNA@data[VariableFeatures(Object_Select), ]
)
))
Expr_Matrix$cluster <- as.character(Object_Select@active.ident)
Expr_Matrix_Mean <- aggregate(
Expr_Matrix[, 1:(ncol(Expr_Matrix) - 1)],
by = list(Expr_Matrix$cluster), FUN = mean
)
rownames(Expr_Matrix_Mean) <- Expr_Matrix_Mean$Group.1
Expr_Matrix_Mean <- Expr_Matrix_Mean[, 2:ncol(Expr_Matrix_Mean)]
Expr_Matrix_Mean <- as.data.frame(t(Expr_Matrix_Mean))
Corr_Result <- cor(Expr_Matrix_Mean)
pdf("MouseStromal_humanCAFs_Cor.pdf", width = 7, height = 7)
corrplot(Corr_Result,
method = "color",
col = rev(brewer.pal(11, "RdYlBu")),
type = "upper",
tl.col = "black",
order = "hclust", is.corr = FALSE, addCoef.col = "grey"
)
dev.off()
}
clusters <- unique(adata_all$cluster)
simi(clusters)
gc()
#############################
# load the combined CAFs and mouse h5ad object
adata_all <- ad$read_h5ad("data/adata_all.h5ad")
# access normalized data matrix
adata_all_dataInput <- t(py_to_r(adata_all$X))
range(adata_all_dataInput)
rownames(adata_all_dataInput) <- rownames(py_to_r(adata_all$var))
colnames(adata_all_dataInput) <- rownames(py_to_r(adata_all$obs))
## access meta data
adata_all_metaData <- py_to_r(adata_all$obs)
adata_all_meta <- adata_all_metaData
# some cleaning
#adata_all_meta$cluster <- paste0("c", adata_all_meta$cluster)
#adata_all_meta <- adata_all_meta[!(adata_all_meta$cluster == 'cNA'), ]
adata_all_dataInput <- adata_all_dataInput[, rownames(adata_all_meta)]
adata_all <- CreateSeuratObject(adata_all_dataInput)
adata_all <- AddMetaData(adata_all, adata_all_meta)
table(adata_all$cluster)
# change the active idents
Idents(adata_all) <- adata_all$cluster
## Similarity analysis
col1 <- c(
"#8F2A47", "#B83A4D", "#D25C52", "#E27E56",
"#ECA86B", "#F4CB85", "#F8E8A2", "#FAF8C7", "#EBF0AF",
"#CEE2A2", "#ABD3A6", "#82C3A5", "#609EB0", "#4C78B1",
"#5C519B"
)
simi <- function(x) {
Object_Select <- subset(adata_all, ident = x)
Object_Select <- FindVariableFeatures(
Object_Select,
selection.method = "vst", nfeatures = 5000
)
Expr_Matrix <- as.data.frame(t(
as.data.frame(
Object_Select@assays$RNA@data[VariableFeatures(Object_Select), ]
)
))
Expr_Matrix$cluster <- as.character(Object_Select@active.ident)
Expr_Matrix_Mean <- aggregate(
Expr_Matrix[, 1:(ncol(Expr_Matrix) - 1)],
by = list(Expr_Matrix$cluster), FUN = mean
)
rownames(Expr_Matrix_Mean) <- Expr_Matrix_Mean$Group.1
Expr_Matrix_Mean <- Expr_Matrix_Mean[, 2:ncol(Expr_Matrix_Mean)]
Expr_Matrix_Mean <- as.data.frame(t(Expr_Matrix_Mean))
Corr_Result <- cor(Expr_Matrix_Mean)
pdf("MouseStromal_humanCAFs_Cor.pdf", width = 7, height = 7)
corrplot(Corr_Result,
method = "color",
col = rev(brewer.pal(11, "RdYlBu")),
type = "upper",
tl.col = "black",
order = "hclust", is.corr = FALSE, addCoef.col = "grey"
)
dev.off()
}
clusters <- unique(adata_all$cluster)
simi(clusters)
gc()
#############################
# load the combined CAFs and mouse h5ad object
adata_all <- ad$read_h5ad("data/adata_all.h5ad")
# access normalized data matrix
adata_all_dataInput <- t(py_to_r(adata_all$X))
range(adata_all_dataInput)
rownames(adata_all_dataInput) <- rownames(py_to_r(adata_all$var))
colnames(adata_all_dataInput) <- rownames(py_to_r(adata_all$obs))
## access meta data
adata_all_metaData <- py_to_r(adata_all$obs)
adata_all_meta <- adata_all_metaData
# some cleaning
#adata_all_meta$cluster <- paste0("c", adata_all_meta$cluster)
#adata_all_meta <- adata_all_meta[!(adata_all_meta$cluster == 'cNA'), ]
adata_all_dataInput <- adata_all_dataInput[, rownames(adata_all_meta)]
adata_all <- CreateSeuratObject(adata_all_dataInput)
adata_all <- AddMetaData(adata_all, adata_all_meta)
table(adata_all$cluster)
# change the active idents
Idents(adata_all) <- adata_all$cluster
## Similarity analysis
col1 <- c(
"#8F2A47", "#B83A4D", "#D25C52", "#E27E56",
"#ECA86B", "#F4CB85", "#F8E8A2", "#FAF8C7", "#EBF0AF",
"#CEE2A2", "#ABD3A6", "#82C3A5", "#609EB0", "#4C78B1",
"#5C519B"
)
simi <- function(x) {
Object_Select <- subset(adata_all, ident = x)
Object_Select <- FindVariableFeatures(
Object_Select,
selection.method = "vst", nfeatures = 5000
)
Expr_Matrix <- as.data.frame(t(
as.data.frame(
Object_Select@assays$RNA@data[VariableFeatures(Object_Select), ]
)
))
Expr_Matrix$cluster <- as.character(Object_Select@active.ident)
Expr_Matrix_Mean <- aggregate(
Expr_Matrix[, 1:(ncol(Expr_Matrix) - 1)],
by = list(Expr_Matrix$cluster), FUN = mean
)
rownames(Expr_Matrix_Mean) <- Expr_Matrix_Mean$Group.1
Expr_Matrix_Mean <- Expr_Matrix_Mean[, 2:ncol(Expr_Matrix_Mean)]
Expr_Matrix_Mean <- as.data.frame(t(Expr_Matrix_Mean))
Corr_Result <- cor(Expr_Matrix_Mean)
pdf("MouseStromal_humanCAFs_Cor.pdf", width = 7, height = 7)
corrplot(Corr_Result,
method = "color",
col = rev(brewer.pal(11, "RdYlBu")),
type = "upper",
tl.col = "black",
order = "hclust", is.corr = FALSE, addCoef.col = "grey"
)
dev.off()
}
clusters <- unique(adata_all$cluster)
simi(clusters)
## Similarity analysis
col1 <- c(
"#8F2A47", "#B83A4D", "#D25C52", "#E27E56",
"#ECA86B", "#F4CB85", "#F8E8A2", "#FAF8C7", "#EBF0AF",
"#CEE2A2", "#ABD3A6", "#82C3A5", "#609EB0", "#4C78B1",
"#5C519B"
)
simi <- function(x) {
Object_Select <- subset(adata_all, ident = x)
Object_Select <- FindVariableFeatures(
Object_Select,
selection.method = "vst", nfeatures = 100
)
Expr_Matrix <- as.data.frame(t(
as.data.frame(
Object_Select@assays$RNA@data[VariableFeatures(Object_Select), ]
)
))
Expr_Matrix$cluster <- as.character(Object_Select@active.ident)
Expr_Matrix_Mean <- aggregate(
Expr_Matrix[, 1:(ncol(Expr_Matrix) - 1)],
by = list(Expr_Matrix$cluster), FUN = mean
)
rownames(Expr_Matrix_Mean) <- Expr_Matrix_Mean$Group.1
Expr_Matrix_Mean <- Expr_Matrix_Mean[, 2:ncol(Expr_Matrix_Mean)]
Expr_Matrix_Mean <- as.data.frame(t(Expr_Matrix_Mean))
Corr_Result <- cor(Expr_Matrix_Mean)
pdf("MouseStromal_humanCAFs_Cor.pdf", width = 7, height = 7)
corrplot(Corr_Result,
method = "color",
col = rev(brewer.pal(11, "RdYlBu")),
type = "upper",
tl.col = "black",
order = "hclust", is.corr = FALSE, addCoef.col = "grey"
)
dev.off()
}
clusters <- unique(adata_all$cluster)
simi(clusters)
gc()
simi <- function(x) {
Object_Select <- subset(adata_all, ident = x)
Object_Select <- FindVariableFeatures(
Object_Select,
selection.method = "vst", nfeatures = 100
)
Expr_Matrix <- as.data.frame(t(
as.data.frame(
Object_Select@assays$RNA@data[VariableFeatures(Object_Select), ]
)
))
Expr_Matrix$cluster <- as.character(Object_Select@active.ident)
Expr_Matrix_Mean <- aggregate(
Expr_Matrix[, 1:(ncol(Expr_Matrix) - 1)],
by = list(Expr_Matrix$cluster), FUN = mean
)
rownames(Expr_Matrix_Mean) <- Expr_Matrix_Mean$Group.1
Expr_Matrix_Mean <- Expr_Matrix_Mean[, 2:ncol(Expr_Matrix_Mean)]
Expr_Matrix_Mean <- as.data.frame(t(Expr_Matrix_Mean))
Corr_Result <- cor(Expr_Matrix_Mean)
pdf("MouseStromal_humanCAFs_Cor.pdf", width = 7, height = 7)
corrplot(Corr_Result,
method = "color",
col = rev(brewer.pal(11, "RdYlBu")),
type = "full",
tl.col = "black",
order = "hclust", is.corr = FALSE, addCoef.col = "grey"
)
dev.off()
}
clusters <- unique(adata_all$cluster)
simi(clusters)
simi <- function(x) {
Object_Select <- subset(adata_all, ident = x)
Object_Select <- FindVariableFeatures(
Object_Select,
selection.method = "vst", nfeatures = 1000
)
Expr_Matrix <- as.data.frame(t(
as.data.frame(
Object_Select@assays$RNA@data[VariableFeatures(Object_Select), ]
)
))
Expr_Matrix$cluster <- as.character(Object_Select@active.ident)
Expr_Matrix_Mean <- aggregate(
Expr_Matrix[, 1:(ncol(Expr_Matrix) - 1)],
by = list(Expr_Matrix$cluster), FUN = mean
)
rownames(Expr_Matrix_Mean) <- Expr_Matrix_Mean$Group.1
Expr_Matrix_Mean <- Expr_Matrix_Mean[, 2:ncol(Expr_Matrix_Mean)]
Expr_Matrix_Mean <- as.data.frame(t(Expr_Matrix_Mean))
Corr_Result <- cor(Expr_Matrix_Mean)
pdf("MouseStromal_humanCAFs_Cor.pdf", width = 7, height = 7)
corrplot(Corr_Result,
method = "color",
col = rev(brewer.pal(11, "RdYlBu")),
type = "full",
tl.col = "black",
order = "hclust", is.corr = FALSE, addCoef.col = "grey"
)
dev.off()
}
clusters <- unique(adata_all$cluster)
simi(clusters)
