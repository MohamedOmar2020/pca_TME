sctplt <- ggplot(na.omit(datTest), aes(x=Gene1, y=Gene2, color=Group)) +
geom_point(size=0.5) + geom_abline(intercept=0, slope=1, alpha=0.5) +
facet_wrap(~ pair, scales="free", nrow=2) +
theme(axis.text=element_text(face="bold", size = 6),
axis.title=element_text(face="bold", size = 8),
legend.position="bottom",
legend.text=element_text(face="bold", size=10),
legend.title = element_text(face="bold", size=10),
strip.text.x = element_text(face="bold", size=6))
sctplt
dev.off()
##############
## Scatter plots
png(filename = "./figures/bulk/MechanisticKTSP_Train_ScatterPlot_Combined.png", width=3000, height=1500, res=300)
### Prepare ggplot
sctplt <- ggplot(na.omit(datTrain), aes(x=Gene1, y=Gene2, color=Group)) +
geom_point(size=0.5) + geom_abline(intercept=0, slope=1, alpha=0.5) +
facet_wrap(~ pair, scales="free", nrow=2) +
theme(axis.text=element_text(face="bold", size = 6),
axis.title=element_text(face="bold", size = 8),
legend.position="bottom",
legend.text=element_text(face="bold", size=10),
legend.title = element_text(face="bold", size=10),
strip.text.x = element_text(face="bold", size=6))
sctplt
dev.off()
## GGPLOT to compare the two classifiers
### Prepare the legend
forLegend_KTSP <- apply(rbind(
ci(roc(usedTrainGroup, ktspStatsTrainRes$statistics, levels = c("No_Mets", "Mets"), direction = "<")),
ci(roc(usedTestGroup, ktspStatsTestRes$statistics, levels = c("No_Mets", "Mets"), direction = "<")),
#ci(roc(usedTrainGroup, ktspStatsTrainUnRes$statistics, levels = c("No_Mets", "Mets"), direction = "<")),
#ci(roc(usedTestGroup, ktspStatsTestUnRes$statistics, levels = c("No_Mets", "Mets"), direction = "<"))
),  1, function(x) {
x <- format(round(x, digits=2), nsmall=2)
paste("AUC: ", x[[2]], ";", "95% CI: ", x[[1]], "-", x[[3]])
})
## GGPLOT to compare the two classifiers
### Prepare the legend
forLegend_KTSP <- apply(rbind(
ci(roc(usedTrainGroup, ktspStatsTrainRes$statistics, levels = c("No_Mets", "Mets"), direction = "<")),
ci(roc(usedTestGroup, ktspStatsTestRes$statistics, levels = c("No_Mets", "Mets"), direction = "<"))
#ci(roc(usedTrainGroup, ktspStatsTrainUnRes$statistics, levels = c("No_Mets", "Mets"), direction = "<")),
#ci(roc(usedTestGroup, ktspStatsTestUnRes$statistics, levels = c("No_Mets", "Mets"), direction = "<"))
),  1, function(x) {
x <- format(round(x, digits=2), nsmall=2)
paste("AUC: ", x[[2]], ";", "95% CI: ", x[[1]], "-", x[[3]])
})
forLegend_KTSP
### Training
datTrn_KTSP <- melt(data.frame(
## Training Group
Training= usedTrainGroup,
## Agnostic KTSP SUM: the lowest mus be for disease status
#Agnostic.Training = ktspStatsTrainUnRes$statistics,
## Mechanistic KTSP SUM training
PRN_signature.Training= ktspStatsTrainRes$statistics))
### Change Colnames
colnames(datTrn_KTSP) <- c("Status", "KTSP_type", "KTSP_sum")
colnames(datTrn_KTSP)
### Testing
datTst_KTSP <- melt(data.frame(
## Testing group
Testing= usedTestGroup,
## Agnostic KTSP SUM: the lowest mus be for disease status
#Agnostic.Testing=ktspStatsTestUnRes$statistics,
## Mechanistic KTSP SUM training
PRN_signature.Testing=ktspStatsTestRes$statistics))
### Change Colnames
colnames(datTst_KTSP) <- c("Status", "KTSP_type", "KTSP_sum")
### Combine
dat_KTSP <- rbind(datTrn_KTSP, datTst_KTSP)
dat_KTSP$Status <- as.numeric(dat_KTSP$Status)-1
####
### Replace levels
levels(dat_KTSP$KTSP_type) <- gsub("\\.", "-", levels(dat_KTSP$KTSP_type))
levels(dat_KTSP$KTSP_type) <- paste(levels(dat_KTSP$KTSP_type), forLegend_KTSP[c(3,1,4,2)])
levels(dat_KTSP$KTSP_type)
### Combine
dat_KTSP <- rbind(datTrn_KTSP, datTst_KTSP)
dat_KTSP$Status <- as.numeric(dat_KTSP$Status)-1
####
### Replace levels
levels(dat_KTSP$KTSP_type) <- gsub("\\.", "-", levels(dat_KTSP$KTSP_type))
levels(dat_KTSP$KTSP_type)
levels(dat_KTSP$KTSP_type) <- paste(levels(dat_KTSP$KTSP_type), forLegend_KTSP[c(1,2)])
levels(dat_KTSP$KTSP_type)
### Plot Curve: note that you must reorder the levels!!!
### ("good" goes first, "bad" goes second, the opposite of confusionMatrix)
roc(usedTrainGroup, ktspStatsTrainRes$statistics, plot = F, print.thres=thr, print.auc=TRUE, print.auc.col="black", levels = c("No_Mets", "Mets"), direction = "<", col="blue", lwd=2, grid=TRUE, main="Mechanistic KTSP performance in the training data")
### Color
myCol <- brewer.pal(3, "Dark2")[c(2,1)]
### Plot and legend titles
plotTitle <- "Performance of the PRN stromal signature at predicting metastasis"
?scale_linetype_manual
#legendTitle <- paste("Mechanistic (", nrow(ktspPredictorRes$TSPs), " pairs)",
#                     " Agnostic (", nrow(ktspPredictorUnRes$TSPs), " pairs)",  sep="")
### Plot
basicplot_KTSP_Combined <- ggplot(dat_KTSP, aes(d=Status, m=KTSP_sum, color=KTSP_type,
linetype = KTSP_type)) +
geom_roc(cutoffs.at = seq(1,20,2)) +
style_roc(theme = theme_grey) + ggtitle(plotTitle) +
theme(plot.title = element_text(face="bold", size=16, hjust = 0.5),
axis.text=element_text(face="plain", size = 11),
axis.title=element_text(face="bold", size = 13),
legend.justification=c(1,0),  legend.position=c(1,0),
legend.background=element_rect(fill="lightblue1"),
legend.text=element_text(face="plain", size = 10),
legend.title = element_text(face="bold", size=12)) +
#scale_color_manual(legendTitle, values=rep(myCol, 2)) +
scale_linetype_manual(values=rep(c("solid", "dotted"), each=2)) +
guides(colour = guide_legend(override.aes = list(size=3)))
### Plot
basicplot_KTSP_Combined
png("./figures/bulk/CompareAUCggplot_Combined.png",
width=3000, height=3000, res=360)
### Color
myCol <- brewer.pal(3, "Dark2")[c(2,1)]
### Plot and legend titles
plotTitle <- "Performance of the PRN stromal signature at predicting metastasis"
#legendTitle <- paste("Mechanistic (", nrow(ktspPredictorRes$TSPs), " pairs)",
#                     " Agnostic (", nrow(ktspPredictorUnRes$TSPs), " pairs)",  sep="")
### Plot
basicplot_KTSP_Combined <- ggplot(dat_KTSP, aes(d=Status, m=KTSP_sum, color=KTSP_type,
linetype = KTSP_type)) +
geom_roc(cutoffs.at = seq(1,20,2)) +
style_roc(theme = theme_grey) + ggtitle(plotTitle) +
theme(plot.title = element_text(face="bold", size=16, hjust = 0.5),
axis.text=element_text(face="plain", size = 11),
axis.title=element_text(face="bold", size = 13),
legend.justification=c(1,0),  legend.position=c(1,0),
legend.background=element_rect(fill="lightblue1"),
legend.text=element_text(face="plain", size = 10),
legend.title = element_text(face="bold", size=12)) +
#scale_color_manual(legendTitle, values=rep(myCol, 2)) +
scale_linetype_manual(values=rep(c("solid", "dotted"), each=2)) +
guides(colour = guide_legend(override.aes = list(size=3)))
### Plot
basicplot_KTSP_Combined
### Close device
dev.off()
save(ktspPredictorRes, file = './objs/PRN_stromal_signature.rda')
require(Biobase)
require(limma)
require(pROC)
require(caret)
require(RColorBrewer)
require(ggplot2)
require(reshape)
require(plotROC)
library(GEOquery)
BiocManager::install('GEOquery')
library(GEOquery)
Dataset1 <- getGEO("GSE101607", GSEMatrix = TRUE, AnnotGPL = TRUE)
Dataset1 <- Dataset1$GSE101607_series_matrix.txt.gz
Dataset3 <- getGEO("GSE74685", GSEMatrix = TRUE, AnnotGPL = TRUE)
Dataset3 <- Dataset3$GSE74685_series_matrix.txt.gz
Sys.setenv("VROOM_CONNECTION_SIZE")
Sys.setenv(VROOM_CONNECTION_SIZE = 500072)
Dataset3 <- getGEO("GSE74685", GSEMatrix = TRUE, AnnotGPL = TRUE)
Sys.setenv(VROOM_CONNECTION_SIZE = 5000072)
Dataset3 <- getGEO("GSE74685", GSEMatrix = TRUE, AnnotGPL = TRUE)
View(Dataset3)
Dataset3 <- Dataset3$GSE74685_series_matrix.txt.gz
Dataset2 <- getGEO("GSE74685", GSEMatrix = TRUE, AnnotGPL = TRUE)
Dataset2 <- Dataset3$GSE74685_series_matrix.txt.gz
Dataset2 <- Dataset3$GSE74685_series_matrix.txt.gz
expr1 <- exprs(Dataset1)
expr2 <- exprs(Dataset2)
Dataset2 <- Dataset3$GSE74685_series_matrix.txt.gz
Dataset2 <- Dataset2$GSE74685_series_matrix.txt.gz
Dataset2 <- getGEO("GSE74685", GSEMatrix = TRUE, AnnotGPL = TRUE)
Dataset2 = Dataset3
save(Dataset1, Dataset2, file = './objs/bone_visceral_datasets.rda')
expr2 <- exprs(Dataset2)
## Get feature data
FeatData1 <- fData(Dataset1)
FeatData2 <- fData(Dataset2)
## Get phenotype
pheno1 <- pData(Dataset1)
pheno2 <- pData(Dataset2)
View(pheno1)
rownames(expr1) <- FeatData1$`Gene symbol`
summary(is.na(rownames(expr1)))
sel <- which(apply(expr1, 1, function(x) all(is.finite(x)) ))
expr1 <- expr1[sel, ]
expr1 <- expr1[!(rownames(expr1) == ""), ]
dim(expr1)
range(expr1)
# log transform
expr1 <- log2(expr1)
range(expr1)
boxplot(expr1)
## Annotate expr2
rownames(expr2) <- FeatData2$GENE_SYMBOL
## Annotate expr2
rownames(expr2) <- FeatData2$GENE_SYMBOL
summary(is.na(rownames(expr2)))
sel <- which(apply(expr2, 1, function(x) all(is.finite(x)) ))
expr2 <- expr2[sel, ]
expr2 <- expr2[!(rownames(expr2) == ""), ]
dim(expr2)
range(expr2)
boxplot(expr2)
# Keep only prostate samples
pheno1 <- pheno1[grep("prostate", pheno1$`disease state:ch1`), ]
# Remove untreated prostate cancer (keep only castration-resistant)
pheno1 <- pheno1[grep("Castration", pheno1$`disease state:ch1`), ]
pheno1$Mets <- as.factor(pheno1$`tissue:ch1`)
levels(pheno1$Mets) <- c("Bone_Mets")
## Modify expr1
expr1 <- expr1[,colnames(expr1) %in% rownames(pheno1)]
exprs(Dataset1) <- expr1
table(pheno2$Mets)
###################################################################
## Modify pheno3
pheno2$Mets <- pheno3$title
###################################################################
## Modify pheno3
pheno2$Mets <- pheno2$title
pheno2$Mets <- gsub(".+_", "", pheno2$Mets)
pheno2$Mets
pheno2$Mets[pheno2$Mets == "LIVER CRPC metastasis"] <- "Visceral_Mets"
pheno2$Mets[pheno2$Mets == "LN CRPC metastasis"] <- "Visceral_Mets"
pheno2$Mets[pheno2$Mets == "LUNG CRPC metastasis"] <- "Visceral_Mets"
pheno2$Mets[pheno2$Mets == "RETROPERITONEAL CRPC metastasis"] <- "Visceral_Mets"
pheno2$Mets[pheno2$Mets == "RENAL CRPC metastasis"] <- "Visceral_Mets"
pheno2$Mets[pheno2$Mets == "ADRENAL CRPC metastasis"] <- "Visceral_Mets"
pheno2$Mets[pheno2$Mets == "KIDNEY CRPC metastasis"] <- "Visceral_Mets"
pheno2$Mets[pheno2$Mets == "APPENDIX CRPC metastasis"] <- "Visceral_Mets"
pheno2$Mets[pheno2$Mets == "PERITONEUM CRPC metastasis"] <- "Visceral_Mets"
pheno2$Mets[pheno2$Mets == "PERITONEAL CRPC metastasis"] <- "Visceral_Mets"
pheno2$Mets[pheno2$Mets == "SCROTUM CRPC metastasis"] <- "Visceral_Mets"
pheno2$Mets[pheno2$Mets == "SKIN CRPC metastasis"] <- "Visceral_Mets"
pheno2$Mets[pheno2$Mets == "SPLEEN CRPC metastasis"] <- "Visceral_Mets"
pheno2$Mets[pheno2$Mets == "BONE CRPC metastasis"] <- "Bone_Mets"
pheno2$Mets <- as.factor(pheno2$Mets)
pheno2$Mets
AllExprs <- list(expr1, expr2)
names(AllExprs) <- c("GSE101607", "GSE74685")
AllPheno <- list(pheno1, pheno2)
names(AllPheno) <- c("GSE101607", "GSE74685")
GroupMets <- c(pheno1$BoneMets, pheno2$Mets)
GroupMets <- as.factor(GroupMets)
levels(GroupMets) <- c("Bone_Mets", "Visceral_Mets")
table(GroupMets)
### Find commom subset of genes
commonGenes <- Reduce("intersect", lapply(AllExprs, rownames))
### Filter expression for the common genes
exprsMetastasis <- mapply(x=AllExprs, FUN=function(x, gns) {
x <- x[ gns ,]
}, MoreArgs=list(gns=commonGenes))
View(MYC_pairs_top)
##########
## Assemble in one data frame
AllMat <- do.call("cbind", exprsMetastasis)
## Check if sample names are identical
all(colnames(AllMat) == names(GroupMets))
###################################################################
## Load the PRN stromal signature
TF_MiR <- load("./objs/PRN_stromal_signature.rda")
### Common genes
keepGns <- intersect(as.vector(myTSPs), rownames(AllMat))
###################################################################
## Load the PRN stromal signature
TF_MiR <- load("./objs/PRN_stromal_signature.rda")
###################################################################
## Load the PRN stromal signature
load("./objs/PRN_stromal_signature.rda")
### Common genes
keepGns <- intersect(as.vector(ktspPredictorRes$TSPs), rownames(AllMat))
ktspPredictorRes
expr1 <- exprs(Dataset1)
expr2 <- exprs(Dataset2)
## Get feature data
FeatData1 <- fData(Dataset1)
FeatData2 <- fData(Dataset2)
## Get phenotype
pheno1 <- pData(Dataset1)
pheno2 <- pData(Dataset2)
## Annotate exprs1
rownames(expr1) <- FeatData1$`Gene symbol`
summary(is.na(rownames(expr1)))
rownames(expr1) <- gsub("-", "", rownames(expr1))
rownames(expr1) <- gsub("_", "", rownames(expr1))
sel <- which(apply(expr1, 1, function(x) all(is.finite(x)) ))
expr1 <- expr1[sel, ]
expr1 <- expr1[!(rownames(expr1) == ""), ]
# log transform
expr1 <- log2(expr1)
## Annotate expr2
rownames(expr2) <- FeatData2$GENE_SYMBOL
summary(is.na(rownames(expr2)))
rownames(expr1) <- gsub("-", "", rownames(expr1))
rownames(expr1) <- gsub("_", "", rownames(expr1))
sel <- which(apply(expr2, 1, function(x) all(is.finite(x)) ))
expr2 <- expr2[sel, ]
expr2 <- expr2[!(rownames(expr2) == ""), ]
dim(expr2)
#########################################
## Modify pheno1
# Keep only prostate samples
pheno1 <- pheno1[grep("prostate", pheno1$`disease state:ch1`), ]
# Remove untreated prostate cancer (keep only castration-resistant)
pheno1 <- pheno1[grep("Castration", pheno1$`disease state:ch1`), ]
pheno1$Mets <- as.factor(pheno1$`tissue:ch1`)
levels(pheno1$Mets) <- c("Bone_Mets")
## Modify expr1
expr1 <- expr1[,colnames(expr1) %in% rownames(pheno1)]
###################################################################
## Modify pheno3
pheno2$Mets <- pheno2$title
pheno2$Mets <- gsub(".+_", "", pheno2$Mets)
pheno2$Mets[pheno2$Mets == "LIVER CRPC metastasis"] <- "Visceral_Mets"
pheno2$Mets[pheno2$Mets == "LN CRPC metastasis"] <- "Visceral_Mets"
pheno2$Mets[pheno2$Mets == "LUNG CRPC metastasis"] <- "Visceral_Mets"
pheno2$Mets[pheno2$Mets == "RETROPERITONEAL CRPC metastasis"] <- "Visceral_Mets"
pheno2$Mets[pheno2$Mets == "RENAL CRPC metastasis"] <- "Visceral_Mets"
pheno2$Mets[pheno2$Mets == "ADRENAL CRPC metastasis"] <- "Visceral_Mets"
pheno2$Mets[pheno2$Mets == "KIDNEY CRPC metastasis"] <- "Visceral_Mets"
pheno2$Mets[pheno2$Mets == "APPENDIX CRPC metastasis"] <- "Visceral_Mets"
pheno2$Mets[pheno2$Mets == "PERITONEUM CRPC metastasis"] <- "Visceral_Mets"
pheno2$Mets[pheno2$Mets == "PERITONEAL CRPC metastasis"] <- "Visceral_Mets"
pheno2$Mets[pheno2$Mets == "SCROTUM CRPC metastasis"] <- "Visceral_Mets"
pheno2$Mets[pheno2$Mets == "SKIN CRPC metastasis"] <- "Visceral_Mets"
pheno2$Mets[pheno2$Mets == "SPLEEN CRPC metastasis"] <- "Visceral_Mets"
pheno2$Mets[pheno2$Mets == "BONE CRPC metastasis"] <- "Bone_Mets"
pheno2$Mets <- as.factor(pheno2$Mets)
#############################################################
#############################################################
## Combine the expression and phenotype
AllExprs <- list(expr1, expr2)
names(AllExprs) <- c("GSE101607", "GSE74685")
AllPheno <- list(pheno1, pheno2)
names(AllPheno) <- c("GSE101607", "GSE74685")
GroupMets <- c(pheno1$BoneMets, pheno2$Mets)
GroupMets <- as.factor(GroupMets)
levels(GroupMets) <- c("Bone_Mets", "Visceral_Mets")
table(GroupMets)
### Find commom subset of genes
commonGenes <- Reduce("intersect", lapply(AllExprs, rownames))
### Filter expression for the common genes
exprsMetastasis <- mapply(x=AllExprs, FUN=function(x, gns) {
x <- x[ gns ,]
}, MoreArgs=list(gns=commonGenes))
##########
## Assemble in one data frame
AllMat <- do.call("cbind", exprsMetastasis)
## Check if sample names are identical
all(colnames(AllMat) == names(GroupMets))
### Common genes
keepGns <- intersect(as.vector(ktspPredictorRes$TSPs), rownames(AllMat))
keep <- ktspPredictorRes$TSPs[,1] %in% rownames(AllMat) & ktspPredictorRes$TSPs[,2] %in% rownames(AllMat)
table(keep)
## Subset
ktspPredictorRes$score <- ktspPredictorRes$score[keepTest]
ktspPredictorRes$TSPs <- ktspPredictorRes$TSPs[keepTest, ]
ktspPredictorRes$tieVote <- droplevels(ktspPredictorRes$tieVote[keepTest])
## Subset
ktspPredictor_metOrigin$score <- ktspPredictorRes$score[keep]
###################################################################
## Load the PRN stromal signature
load("./objs/PRN_stromal_signature.rda")
## Subset
ktspPredictor_metOrigin$score <- ktspPredictorRes$score[keep]
keep <- ktspPredictorRes$TSPs[,1] %in% rownames(AllMat) & ktspPredictorRes$TSPs[,2] %in% rownames(AllMat)
table(keep)
## Subset
ktspPredictor_metOrigin <- ktspPredictorRes
ktspPredictor_metOrigin$score <- ktspPredictor_metOrigin$score[keep]
ktspPredictor_metOrigin$TSPs <- ktspPredictor_metOrigin$TSPs[keep, ]
ktspPredictor_metOrigin$tieVote <- droplevels(ktspPredictor_metOrigin$tieVote[keep])
ktspPredictor_metOrigin$name <- paste0(nrow(ktspPredictor_metOrigin$TSPs), 'TSPs')
## Normalization between arrays
usedMat <- normalizeBetweenArrays(AllMat, method = "quantile")
boxplot(usedMat)
usedGroup <- GroupMets
############################################################################
### Compute the sum and find the best threshold
ktspStats_metOrigin <- SWAP.KTSP.Statistics(inputMat = usedMat, classifier = ktspPredictor_metOrigin, CombineFunc = sum)
summary(ktspStats_metOrigin$statistics)
### Threshold
thr <- coords(roc(usedGroup, ktspStats_metOrigin$statistics, levels = c("Bone_Mets", "Visceral_Mets"), direction = "<",), transpose = TRUE, "best")["threshold"]
ktspStats_metOrigin$statistics
usedGroup
############################################################################
## Predict the met origin
ktspPredictor_metOrigin$labels
table(GroupMets)
############################################################################
## Predict the met origin
ktspPredictor_metOrigin$labels <- c('Visceral_Mets', 'Bone_Mets')
### Compute the sum and find the best threshold
ktspStats_metOrigin <- SWAP.KTSP.Statistics(inputMat = usedMat, classifier = ktspPredictor_metOrigin, CombineFunc = sum)
summary(ktspStats_metOrigin$statistics)
### Threshold
thr <- coords(roc(usedGroup, ktspStats_metOrigin$statistics, levels = c("Bone_Mets", "Visceral_Mets"), direction = "<",), transpose = TRUE, "best")["threshold"]
thr
usedGroup <- factor(usedGroup, levels = c('Visceral_Mets', 'Bone_Mets'))
### Compute the sum and find the best threshold
ktspStats_metOrigin <- SWAP.KTSP.Statistics(inputMat = usedMat, classifier = ktspPredictor_metOrigin, CombineFunc = sum)
summary(ktspStats_metOrigin$statistics)
### Threshold
thr <- coords(roc(usedGroup, ktspStats_metOrigin$statistics, levels = c("Bone_Mets", "Visceral_Mets"), direction = "<",), transpose = TRUE, "best")["threshold"]
summary(ktspStats_metOrigin$statistics)
### Threshold
thr <- coords(roc(usedGroup, ktspStats_metOrigin$statistics, levels = c("Visceral_Mets", "Bone_Mets"), direction = "<",), transpose = TRUE, "best")["threshold"]
### Plot Curve: note that you must reorder the levels!!!
### ("good" goes first, "bad" goes second, the opposite of confusionMatrix)
roc(usedTrainGroup, ktspStats_metOrigin$statistics, plot = TRUE, print.thres=thr, print.thres.adj=c(0.01,1.25), print.auc=TRUE, print.auc.col="black", levels = c("Bone_Mets", "Visceral_Mets"), direction = "<", col="blue", lwd=2, grid=TRUE, main="Mechanistic KTSP performance in the training data")
summary(ktspStats_metOrigin$statistics)
###################################################################
## Load the PRN stromal signature
load("./objs/PRN_stromal_signature.rda")
ktspPredictorRes
######
# Clean Work space
rm(list = ls())
# Set work directory
#setwd("/Volumes/Macintosh/Dropbox (MechPred)/MechPred/User/Mohamed/MechanisticModels/Prostate")
############################################################################
### Load library
require(switchBox)
require(Biobase)
require(limma)
require(pROC)
require(caret)
require(RColorBrewer)
require(ggplot2)
require(reshape)
require(plotROC)
library(enrichR)
library(mltools)
library(xtable)
###########################################################################
### Load expression and phenotype data
load("./data/bulk/MetastasisDataGood.rda")
############################################################################
# load the pairs
# load mechanistic pairs
load('./data/MYC_pairs.rda')
load('./data/MYC_pairs_top.rda')
myTSPs <- as.matrix(MYC_pairs_top)
### Quantile normalize
usedTrainMat <- normalizeBetweenArrays(mixTrainMat, method = "quantile")
usedTestMat <- normalizeBetweenArrays(mixTestMat, method = "quantile")
### Common genes
keepGns <- intersect(as.vector(myTSPs), rownames(usedTrainMat))
#keepGns_TF_MiR <- keepGns
#save(keepGns_TF_MiR, file = "./Objs/KTSP/KeepGns_TF_MiR.rda")
#usedTrainMat <- usedTrainMat[keepGns, ]
#usedTestMat <- usedTestMat[keepGns, ]
### Associated groups
usedTrainGroup <- mixTrainGroup
usedTestGroup <- mixTestGroup
### For the TSP
myTSPs <- myTSPs[myTSPs[,1] %in% keepGns & myTSPs[,2] %in% keepGns , ]
#print(xtable(myTSPs, type = "latex"), file = "./Objs/KTSP/Restricted_Pairs.tex")
#write.csv(myTSPs, file = "./Objs/KTSP/Restricted_Pairs.csv")
###########################################################################
### TRAINING using restricted pairs
###########################################################################
### Set Feature number and max k
ktsp <- c(3:25)
featNo <- nrow(usedTrainMat)
### Train a classifier using default filtering function based on Wilcoxon
set.seed(333)
ktspPredictorRes <- SWAP.Train.KTSP(
usedTrainMat, usedTrainGroup, krange = 25,
FilterFunc = SWAP.Filter.Wilcoxon, featureNo=featNo, RestrictedPairs = myTSPs, disjoint = F)
ktspPredictorRes
### Check consistency with biology
keepTest <- ktspPredictorRes$TSPs[,1] %in% myTSPs[,"up"] & ktspPredictorRes$TSPs[,2] %in% myTSPs[,"down"]
table(keepTest)
## Subset
ktspPredictorRes$score <- ktspPredictorRes$score[keepTest]
ktspPredictorRes$TSPs <- ktspPredictorRes$TSPs[keepTest, ]
ktspPredictorRes$tieVote <- droplevels(ktspPredictorRes$tieVote[keepTest])
ktspPredictorRes$name <- paste0(nrow(ktspPredictorRes$TSPs), 'TSPs')
save(ktspPredictorRes, file = './objs/PRN_stromal_signature.rda')
############################################################################
### Compute the sum and find the best threshold: All training samples
ktspStatsTrainRes <- SWAP.KTSP.Statistics(inputMat = usedTrainMat, classifier = ktspPredictorRes, CombineFunc = sum)
summary(ktspStatsTrainRes$statistics)
### Threshold
thr <- coords(roc(usedTrainGroup, ktspStatsTrainRes$statistics, levels = c("No_Mets", "Mets"), direction = "<"), "best")["threshold"]
thr
dim(usedTrainMat)
dim(usedTestMat)
930+309
### Print ROC curve local maximas
coords(roc(usedTrainGroup, ktspStatsTrainRes$statistics, levels = c("No_Mets", "Mets"), direction = "<"), "local maximas")
### Plot Curve: note that you must reorder the levels!!!
### ("good" goes first, "bad" goes second, the opposite of confusionMatrix)
roc(usedTrainGroup, ktspStatsTrainRes$statistics, plot = F, print.thres=thr, print.auc=TRUE, print.auc.col="black", levels = c("No_Mets", "Mets"), direction = "<", col="blue", lwd=2, grid=TRUE, main="Mechanistic KTSP performance in the training data")
### Get predictions based on best threshold from ROC curve
usedTrainPredictionRes <- SWAP.KTSP.Classify(usedTrainMat, ktspPredictorRes, DecisionFunc = function(x) sum(x) > thr)
### Resubstitution performance in the TRAINING set
confusionMatrix(usedTrainPredictionRes, usedTrainGroup, positive = "Mets", mode = "everything")
MCC_Mechanistic_Train <- mltools::mcc(pred = usedTrainPredictionRes, actuals = usedTrainGroup)
MCC_Mechanistic_Train
## Compute the sum and find the best threshold
ktspStatsTestRes <- SWAP.KTSP.Statistics(inputMat = usedTestMat, classifier = ktspPredictorRes, CombineFunc = sum)
summary(ktspStatsTestRes$statistics)
## Plot curve
roc(usedTestGroup, ktspStatsTestRes$statistics, plot = F, print.auc=TRUE, print.auc.col="black", levels = c("No_Mets", "Mets"), direction = "<", col="blue", lwd=2, grid=TRUE, main= "Mechanistic KTSP using TF_MiR Gns")
### Get predictions based on best threshold from ROC curve
usedTestPredictionRes <- SWAP.KTSP.Classify(usedTestMat, ktspPredictorRes, DecisionFunc = function(x) sum(x) > thr)
### Resubstitution performance in the Test set
confusionMatrix(usedTestPredictionRes, usedTestGroup, positive = "Mets", mode = "everything")
MCC_Mechanistic_Test <- mltools::mcc(pred = usedTestPredictionRes, actuals = usedTestGroup)
MCC_Mechanistic_Test
