library(dplyr)
library(scales)
library(viridis)
library(grid)
library(Seurat)
library(mgcv)
library(MASS)
library(colorRamps)
library(ComplexHeatmap)
library(RColorBrewer)
library(ggpmisc)
library(cowplot)
library(M3C)
library(ConsensusClusterPlus)
library(clusterProfiler)
library(rstatix)
library(fgsea)
library(org.Mm.eg.db)
library(GO.db)
library(limma)
library(reticulate)
get_density <- function(x, y, ...) {
dens <- MASS::kde2d(x, y, ...)
ix <- findInterval(x, dens$x)
iy <- findInterval(y, dens$y)
ii <- cbind(ix, iy)
return(dens$z[ii])
}
# set the active conda environment
use_condaenv(condaenv = "scutils", required = TRUE)
# load the mouse h5ad object
adata_mouse <- ad$read_h5ad("outs/h5ads/fapcm_fibroblasts_v6_clean_regulons_5.h5ad")
# load the anndata module
ad <- import("anndata", convert = FALSE)
Convert("outs/h5ads/fapcm_fibroblasts_v6_clean_regulons_5.h5ad", dest = "h5seurat", overwrite = TRUE)
library(Seurat)
library(SeuratData)
library(SeuratDisk)
Convert("outs/h5ads/fapcm_fibroblasts_v6_clean_regulons_5.h5ad", dest = "h5seurat", overwrite = TRUE)
adata_mouse <- LoadH5Seurat("outs/h5ads/fapcm_fibroblasts_v6_clean_regulons_5.h5seurat")
?LoadH5Seurat
adata_mouse <- LoadH5Seurat("outs/h5ads/fapcm_fibroblasts_v6_clean_regulons_5.h5seurat", assays = 'RNA')
Convert("outs/h5ads/adata_mouse.h5ad", dest = "h5seurat", overwrite = TRUE)
Convert("outs/h5ads/adata_mouse.h5ad", dest = "h5seurat", overwrite = TRUE)
adata_mouse <- LoadH5Seurat("outs/h5ads/adata_mouse.h5ad", assays = 'RNA')
?Convert
Convert("outs/h5ads/adata_mouse.h5ad", dest = "h5seurat", overwrite = TRUE, assay = 'RNA')
# load the mouse h5ad object
adata_mouse <- ad$read_h5ad("outs/h5ads/fapcm_fibroblasts_v6_clean_regulons_5.h5ad")
# access normalized data matrix
mouse_dataInput <- t(py_to_r(adata_mouse$X))
range(mouse_dataInput)
rownames(mouse_dataInput) <- rownames(py_to_r(adata_mouse$var))
colnames(mouse_dataInput) <- rownames(py_to_r(adata_mouse$obs))
## access meta data
mouse_metaData <- py_to_r(adata_mouse$obs)
mouse_meta <- mouse_metaData
# some cleaning
mouse_meta$cluster <- paste0("c", mouse_meta$cluster)
mouse_meta <- mouse_meta[!(mouse_meta$cluster == 'cNA'), ]
mouse_dataInput <- mouse_dataInput[, rownames(mouse_meta)]
?CreateSeuratObject
mouse_object <- CreateSeuratObject(counts = mouse_dataInput, meta.data = mouse_meta)
View(mouse_object)
Idents(mouse_object)
DimPlot(mouse_object, reduction = "umap")
Idents(mouse_object) <- mouse_object$cluster
Idents(mouse_object)
DimPlot(mouse_object, reduction = "umap")
# umap
mouse_object <- RunUMAP(mouse_object, dims = 1:10)
# umap
metadata_table <- mouse_object@meta.data
metadata_table$UMI_id <- rownames(metadata_table)
adata_mouse$uns
umapCoord <- py_to_r(adata_mouse$uns['umap'])
View(umapCoord)
umapCoord <- py_to_r(adata_mouse$obsm['X_umap'])
View(umapCoord)
View(mouse_meta)
umapCoord$UMI_id <- rownames(mouse_meta)
umapCoord <- py_to_r(adata_mouse$obsm['X_umap'])
umapCoord <- as.data.frame(py_to_r(adata_mouse$obsm['X_umap']))
umapCoord$UMI_id <- rownames(mouse_meta)
py_to_r(adata_mouse$obs)
# load the mouse h5ad object
adata_mouse <- ad$read_h5ad("outs/h5ads/adata_mouse.h5ad")
# access normalized data matrix
mouse_dataInput <- t(py_to_r(adata_mouse$X))
range(mouse_dataInput)
rownames(mouse_dataInput) <- rownames(py_to_r(adata_mouse$var))
colnames(mouse_dataInput) <- rownames(py_to_r(adata_mouse$obs))
## access meta data
mouse_metaData <- py_to_r(adata_mouse$obs)
mouse_meta <- mouse_metaData
# some cleaning
mouse_meta$cluster <- paste0("c", mouse_meta$cluster)
mouse_dataInput <- mouse_dataInput[, rownames(mouse_meta)]
#######################
## create seurat object
mouse_object <- CreateSeuratObject(counts = mouse_dataInput, meta.data = mouse_meta)
Idents(mouse_object) <- mouse_object$cluster
# add the umap
umapCoord <- as.data.frame(py_to_r(adata_mouse$obsm['X_umap']))
umapCoord$UMI_id <- rownames(mouse_meta)
metadata_table <- mouse_object@meta.data
metadata_table$UMI_id <- rownames(metadata_table)
metadata_table <- merge.data.frame(metadata_table, umapCoord, by = "UMI_id")
metadata_table$UMI_id <- NULL
mouse_object@meta.data <- metadata_table
DimPlot(mouse_object, reduction = "umap")
View(mouse_object)
?AddMetaData
mouse_object@reductions$umap <- umapCoord
DimPlot(mouse_object, reduction = "umap")
mouse_object@reductions$umap <- as.matrix(umapCoord)
DimPlot(mouse_object, reduction = "umap")
mouse_object[['UMAP']] <- CreateDimReducObject(embeddings = umapCoord, key = "UMAP_", global = T, assay = "RNA")
umapCoord
# add the umap
umapCoord <- py_to_r(adata_mouse$obsm['X_umap'])
mouse_object[['UMAP']] <- CreateDimReducObject(embeddings = umapCoord, key = "UMAP_", global = T, assay = "RNA")
DimPlot(mouse_object, reduction = "umap")
mouse_object@reductions$umap <- CreateDimReducObject(embeddings = umapCoord, key = "UMAP_", global = T, assay = "RNA")
DimPlot(mouse_object, reduction = "umap")
?CreateDimReducObject
mouse_object@reductions$umap
mouse_object@reductions$umap <- CreateDimReducObject(embeddings = umapCoord, key = "UMAP_", global = T, assay = "RNA")
umapCoord
DimPlot(mouse_object, reduction = "umap")
mouse_object <- RunUMAP(mouse_object, dims = 1:10)
#######################
## create seurat object
mouse_object <- CreateSeuratObject(counts = mouse_dataInput, meta.data = mouse_meta)
Idents(mouse_object) <- mouse_object$cluster
# add the umap
umapCoord <- py_to_r(adata_mouse$obsm['X_umap'])
rownames(umapCoord) <- rownames(mouse_meta)
umapCoord <- as(umapCoord, "matrix")
mouse_object@reductions$umap <- CreateDimReducObject(embeddings = umapCoord, key = "UMAP_", global = T, assay = "RNA")
DimPlot(mouse_object, reduction = "umap")
View(mouse_object)
View(mouse_object)
# get the colors
clusterColors <- py_to_r(adata_mouse$uns['cluster_colors'])
# load the mouse h5ad object
adata_mouse <- ad$read_h5ad("outs/h5ads/adata_mouse.h5ad")
# access normalized data matrix
mouse_dataInput <- t(py_to_r(adata_mouse$X))
range(mouse_dataInput)
rownames(mouse_dataInput) <- rownames(py_to_r(adata_mouse$var))
colnames(mouse_dataInput) <- rownames(py_to_r(adata_mouse$obs))
## access meta data
mouse_metaData <- py_to_r(adata_mouse$obs)
mouse_meta <- mouse_metaData
# some cleaning
mouse_meta$cluster <- paste0("c", mouse_meta$cluster)
mouse_dataInput <- mouse_dataInput[, rownames(mouse_meta)]
#######################
## create seurat object
mouse_object <- CreateSeuratObject(counts = mouse_dataInput, meta.data = mouse_meta)
Idents(mouse_object) <- mouse_object$cluster
# add the umap
umapCoord <- py_to_r(adata_mouse$obsm['X_umap'])
rownames(umapCoord) <- rownames(mouse_meta)
umapCoord <- as(umapCoord, "matrix")
mouse_object@reductions$umap <- CreateDimReducObject(embeddings = umapCoord, key = "UMAP_", global = T, assay = "RNA")
# get the colors
clusterColors <- py_to_r(adata_mouse$uns['cluster_colors'])
DimPlot(mouse_object, reduction = "umap", cols = clusterColors)
?DimPlot
DimPlot(mouse_object, reduction = "umap", cols = clusterColors, pt.size = 2)
DimPlot(mouse_object, reduction = "umap", cols = clusterColors, pt.size = 1)
#######################
## create seurat object
mouse_object <- CreateSeuratObject(counts = mouse_dataInput, meta.data = mouse_meta)
Idents(mouse_object) <- mouse_object$cluster
# re-order the levels
levels(mouse_object)
?Idents
# re-order the levels
levels(mouse_object@active.ident)
# re-order the levels
mouse_object@active.ident <- factor(mouse_object@active.ident, levels = c('c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7'))
table(mouse_object@active.ident)
#######################
## create seurat object
mouse_object <- CreateSeuratObject(counts = mouse_dataInput, meta.data = mouse_meta)
Idents(mouse_object) <- mouse_object$cluster
# add the umap
umapCoord <- py_to_r(adata_mouse$obsm['X_umap'])
rownames(umapCoord) <- rownames(mouse_meta)
umapCoord <- as(umapCoord, "matrix")
mouse_object@reductions$umap <- CreateDimReducObject(embeddings = umapCoord, key = "UMAP_", global = T, assay = "RNA")
# get the colors
clusterColors <- py_to_r(adata_mouse$uns['cluster_colors'])
# re-order the levels
mouse_object@active.ident <- factor(mouse_object@active.ident, levels = c('c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7'))
table(mouse_object@active.ident)
DimPlot(mouse_object, reduction = "umap", cols = clusterColors, pt.size = 1)
DimPlot(mouse_object, reduction = "umap", cols = clusterColors, pt.size = 2)
##############Libraries####
library(Matrix)
library(reshape)
library(readxl)
library(ggplot2)
library(devtools)
library(circlize)
library(ggpubr)
library(plyr)
library(dplyr)
library(scales)
library(viridis)
library(grid)
library(Seurat)
library(mgcv)
library(MASS)
library(colorRamps)
library(ComplexHeatmap)
library(RColorBrewer)
library(ggpmisc)
library(cowplot)
library(M3C)
library(ConsensusClusterPlus)
library(clusterProfiler)
library(rstatix)
library(fgsea)
library(org.Mm.eg.db)
library(GO.db)
library(limma)
library(reticulate)
library(Seurat)
library(SeuratDisk)
############################
get_density <- function(x, y, ...) {
dens <- MASS::kde2d(x, y, ...)
ix <- findInterval(x, dens$x)
iy <- findInterval(y, dens$y)
ii <- cbind(ix, iy)
return(dens$z[ii])
}
##############################
# set the active conda environment
use_condaenv(condaenv = "scutils", required = TRUE)
# load the anndata module
ad <- import("anndata", convert = FALSE)
# load the mouse h5ad object
adata_mouse <- ad$read_h5ad("outs/h5ads/adata_mouse.h5ad")
# access normalized data matrix
mouse_dataInput <- t(py_to_r(adata_mouse$X))
range(mouse_dataInput)
rownames(mouse_dataInput) <- rownames(py_to_r(adata_mouse$var))
colnames(mouse_dataInput) <- rownames(py_to_r(adata_mouse$obs))
## access meta data
mouse_metaData <- py_to_r(adata_mouse$obs)
mouse_meta <- mouse_metaData
# some cleaning
mouse_meta$cluster <- paste0("c", mouse_meta$cluster)
mouse_dataInput <- mouse_dataInput[, rownames(mouse_meta)]
#######################
## create seurat object
mouse_object <- CreateSeuratObject(counts = mouse_dataInput, meta.data = mouse_meta)
Idents(mouse_object) <- mouse_object$cluster
# add the umap
umapCoord <- py_to_r(adata_mouse$obsm['X_umap'])
rownames(umapCoord) <- rownames(mouse_meta)
umapCoord <- as(umapCoord, "matrix")
mouse_object@reductions$umap <- CreateDimReducObject(embeddings = umapCoord, key = "UMAP_", global = T, assay = "RNA")
# get the colors
clusterColors <- py_to_r(adata_mouse$uns['cluster_colors'])
# re-order the levels
mouse_object@active.ident <- factor(mouse_object@active.ident, levels = c('c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7'))
table(mouse_object@active.ident)
DimPlot(mouse_object, reduction = "umap", cols = clusterColors, pt.size = 2)
####################################################
stress_genes= c("G0s2", "Jun", "Junb", "Jund", "Fos", "Dusp1", "Cdkn1a", "Fosb", "Btg2", "Klf6", "Klf4")
cc_genes =  unique(c(paste0(toupper(substr(tolower(as.character(unlist(cc.genes.updated.2019))), 1, 1)), substr(tolower(as.character(unlist(cc.genes.updated.2019))), 2, nchar(tolower(as.character(unlist(cc.genes.updated.2019)))))), "1700020L24Rik" ,"5730416F02Rik" ,"Agpat4","Asf1b", "Aspm","Ccdc18","Ccr9","Clspn","Cyp4f17","Dek","Dnmt3b" ,"Dtl","Fancm","Fignl1","Gm14214","Gm14730","Gm15428","Gm15448","Gm21992","Gm23248","Gm26465","Gm5145" ,"Mcm4","Mcm8","Mki67","Oip5","Pcna","Pcna-ps2","Pigv","Rnd1","Snrpa","Ube2c"))
IFN_genes = unique(c(grep("Irf", rownames(seurat@assays$RNA@counts), v = T), grep("Ifi", rownames(rownames(seurat@assays$RNA@counts)), v = T), "Cd2","Cd3d", "Cmpk2","Cxcl10", "Isg15","Isg20","Oasl1" ,"Phf11b" ,"Plac8", "Rsad2","Rtp4","Sdf4", "Slfn4","Tnfrsf18" ,"Tnfrsf4","Tnfrsf9","Trex1","Usp18","Xaf1"))
IFN_genes = unique(c(grep("Irf", rownames(mouse_object@assays$RNA@counts), v = T), grep("Ifi", rownames(rownames(mouse_object@assays$RNA@counts)), v = T), "Cd2","Cd3d", "Cmpk2","Cxcl10", "Isg15","Isg20","Oasl1" ,"Phf11b" ,"Plac8", "Rsad2","Rtp4","Sdf4", "Slfn4","Tnfrsf18" ,"Tnfrsf4","Tnfrsf9","Trex1","Usp18","Xaf1"))
IFN_genes
ccl_genes = grep("Ccl", rownames(mouse_object@assays$RNA@counts), v = T)
ccl_genes
MHC_genes =  c(grep("^H2-", rownames(mouse_object@assays$RNA@counts), v = T), "Cd74", "B2m")
comp_genes =  c(grep("^C1q", rownames(mouse_object@assays$RNA@counts), v = T))
ig_genes = c(grep("^Igj|^Igh|^Igk|^Igl", rownames(mouse_object@assays$RNA@counts), v = T))
hb_genes = c(grep("^Hba|^Hbb", rownames(mouse_object@assays$RNA@counts), v = T))
dot_days = c("d14")
dot_exp = c(1, 2)
dot_treat = c("UT","m1", "m2a")
mouse_object$orig.ident
names(mouse_object$orig.ident[as.character(mouse_object@active.ident)
########################################################################################################
########################################################################################################
##############fig 1h-k####
dot_clusters = unique(mouse_object$cluster)
dot_clusters
colnames(mouse_meta)
dot_mm = unique(mouse_object$key)
dot_mm
########################################################################################################
########################################################################################################
##############fig 1h-k####
dot_clusters = c('c3', 'c4')
dot_mm = unique(mouse_object$key)
num_cells =  setdiff(names(mouse_object$orig.ident[as.character(mouse_object@active.ident) %in% dot_clusters & mouse_object$Staining.panel.name %in% "T" & as.vector(mouse_object$Experiment) %in% dot_exp])); length(num_cells)
num_cells =  setdiff(names(mouse_object$orig.ident[as.character(mouse_object@active.ident) %in% dot_clusters & as.vector(mouse_object$key) %in% dot_mm])); length(num_cells)
########################################################################################################
########################################################################################################
##############fig 1h-k####
dot_clusters = c('c3', 'c4')
num_cells =  setdiff(names(mouse_object$orig.ident[as.character(mouse_object@active.ident) %in% dot_clusters & mouse_object$key %in% dot_mm])); length(num_cells)
names(mouse_object$orig.ident[as.character(mouse_object@active.ident) %in% dot_clusters & mouse_object$key %in% dot_mm]))
names(mouse_object$orig.ident[as.character(mouse_object@active.ident) %in% dot_clusters & mouse_object$key %in% dot_mm])
num_cells =  setdiff(names(mouse_object$orig.ident[as.character(mouse_object@active.ident) %in% dot_clusters & mouse_object$key %in% dot_mm])); length(num_cells)
colnames(mouse_meta)
?setdiff
num_cells =  setdiff(names(mouse_object$orig.ident[as.character(mouse_object@active.ident) %in% dot_clusters & mouse_object$key %in% dot_mm])); length(num_cells)
num_cells =  setdiff(names(mouse_object$orig.ident[as.character(mouse_object@active.ident) %in% dot_clusters & mouse_object$key %in% dot_mm])); length(num_cells)
num_cells =  setdiff(names(mouse_object$orig.ident[as.character(mouse_object@active.ident) %in% dot_clusters & mouse_object$key %in% dot_mm])); length(num_cells)
num_cells = setdiff(names(mouse_object$orig.ident[as.character(mouse_object@active.ident) %in% dot_clusters & mouse_object$key %in% dot_mm])); length(num_cells)
num_cells = setdiff(names(mouse_object$orig.ident[as.character(mouse_object@active.ident) %in% dot_clusters & mouse_object$key %in% dot_mm & mouse_object$key %in% dot_mm])); length(num_cells)
num_cells =  setdiff(names(seurat$orig.ident[as.character(seurat@active.ident) %in% dot_clusters & seurat$Staining.panel.name %in% "T" & as.vector(seurat$Experiment) %in% dot_exp & seurat$Day.of.tumor.harvest %in% dot_days])); length(num_cells)
table(mouse_object$model)
num_cells =  setdiff(names(mouse_object$orig.ident[as.character(mouse_object@active.ident) %in% dot_clusters & mouse_object$model %in% "T-ERG" & as.vector(mouse_object$key) %in% dot_mm])); length(num_cells)
table(mouse_object$condition)
num_cells =  setdiff(names(mouse_object$orig.ident[as.character(mouse_object@active.ident) %in% dot_clusters & mouse_object$model %in% "T-ERG" & as.vector(mouse_object$key) %in% dot_mm & mouse_object$condition %in% 'wildtype'])); length(num_cells)
names(mouse_object$orig.ident[as.character(mouse_object@active.ident) %in% dot_clusters & mouse_object$key %in% dot_mm & mouse_object$key %in% dot_mm])
num_cells = setdiff(names(mouse_object$active.ident[as.character(mouse_object@active.ident) %in% dot_clusters & mouse_object$key %in% dot_mm & mouse_object$key %in% dot_mm])); length(num_cells)
mouse_object@active.ident
num_cells = setdiff(names(mouse_object$active.ident[as.character(mouse_object@active.ident) %in% dot_clusters & mouse_object$key %in% dot_mm & mouse_object$key %in% dot_mm])); length(num_cells)
num_cells = setdiff(names(mouse_object$cluster[as.character(mouse_object@active.ident) %in% dot_clusters & mouse_object$key %in% dot_mm & mouse_object$key %in% dot_mm])); length(num_cells)
mouse_object$orig.ident
num_cells = setdiff(names(mouse_object$orig.ident[as.character(mouse_object@active.ident) %in% dot_clusters & mouse_object$key %in% dot_mm & mouse_object$key %in% dot_mm])); length(num_cells)
num_cells = dplyr::setdiff(names(mouse_object$orig.ident[as.character(mouse_object@active.ident) %in% dot_clusters & mouse_object$key %in% dot_mm & mouse_object$key %in% dot_mm])); length(num_cells)
num_cells = plyr::setdiff(names(mouse_object$orig.ident[as.character(mouse_object@active.ident) %in% dot_clusters & mouse_object$key %in% dot_mm & mouse_object$key %in% dot_mm])); length(num_cells)
num_cells = dplyr::setdiff(names(mouse_object$orig.ident[as.character(mouse_object@active.ident) %in% dot_clusters & mouse_object$key %in% dot_mm & mouse_object$key %in% dot_mm])); length(num_cells)
base::setdiff()
num_cells = base::setdiff(names(mouse_object$orig.ident[as.character(mouse_object@active.ident) %in% dot_clusters & mouse_object$key %in% dot_mm & mouse_object$key %in% dot_mm])); length(num_cells)
num_cells = base::setdiff(names(mouse_object$orig.ident[as.character(mouse_object@active.ident) %in% dot_clusters & mouse_object$key %in% dot_mm & mouse_object$key %in% dot_mm])); length(num_cells)
?dplyr::setdiff
num_cells = dplyr::setdiff(names(mouse_object$orig.ident[as.character(mouse_object@active.ident) %in% dot_clusters , mouse_object$key %in% dot_mm & mouse_object$key %in% dot_mm])); length(num_cells)
num_cells = dplyr::setdiff(names(mouse_object$orig.ident[as.character(mouse_object@active.ident) %in% dot_clusters & mouse_object$key %in% dot_mm & mouse_object$key %in% dot_mm])), length(num_cells)
num_cells = dplyr::setdiff(names(mouse_object$orig.ident[as.character(mouse_object@active.ident) %in% dot_clusters & mouse_object$key %in% dot_mm & mouse_object$key %in% dot_mm]), length(num_cells)
num_cells = dplyr::setdiff(names(mouse_object$orig.ident[as.character(mouse_object@active.ident) %in% dot_clusters & mouse_object$key %in% dot_mm & mouse_object$key %in% dot_mm]), length(num_cells))
num_cells = setdiff(names(mouse_object$orig.ident[as.character(mouse_object@active.ident) %in% dot_clusters], mouse_object$key %in% dot_mm)); length(num_cells)
num_cells = setdiff(names(mouse_object$orig.ident[as.character(mouse_object@active.ident) %in% dot_clusters]), mouse_object$key %in% dot_mm); length(num_cells)
num_cells
MouseMidel = as.vector(mouse_object$key[num_cells])
MouseModel = as.vector(mouse_object$key[num_cells])
ct = as.vector(mouse_object@active.ident[num_cells])
dot_data = data.frame(Mouse = MouseModel, ct = ct)
dot_factors = c("Mouse")
dot_sum1 = table(dot_data[,c("Mouse", "ct")])/rowSums(table(dot_data[,c("Mouse", "ct")]))*100
attributes(dot_sum1)$class <- "matrix"
dot_sum2 = uniquecombs(dot_data[, dot_factors], ordered = F); rownames(dot_sum2) = as.vector(dot_sum2$Mouse); dot_sum2 = dot_sum2[rownames(dot_sum1),]
rownames(dot_sum2) = rownames(dot_sum1) = c()
dot_sum = cbind(dot_sum1, dot_sum2)
# colnames(dot_sum)[0:(length(unique(seurat@active.ident))-1)] = paste0("ct_", colnames(dot_sum)[0:(length(unique(seurat@active.ident))-1)])
#dot_sum$Treatment = mapvalues(factor(dot_sum$Treatment, levels = c("UT","m1", "m2a")), from = c("UT","m1", "m2a"), to = c("Ctrl","m1", "m2a"))
dot_plot = melt(dot_sum)
dot_sum_lymph = dot_sum
dot_show = c("c3", "c4")
ggplot(dot_plot[dot_plot$variable %in% dot_show,], aes(x = Mouse, y = value)) +
facet_wrap(. ~ variable,  strip.position = 'top', nrow = 1, scales = "free") +
stat_summary(aes(fill = Treatment), color = "black", fun = mean, geom = "bar", size = 0.5, width = 0.6) +
stat_summary(fun.data=mean_sdl, geom = "errorbar", width = 0.2, size = 0.3, color = "black") +
scale_fill_manual(values = c("grey90", "grey60", "grey20")) + #c("cornflowerblue", "orange", "red")
geom_point(size = 1.5, position = position_jitter(seed = 1, width = 0.2, height = 0), shape = 21, fill = "white") +
geom_signif(comparisons = list(c("m1", "m2a"), c("Ctrl", "m2a")), test = "t.test", map_signif_level = F, family = "serif", textsize = 2, step_increase = 0.15) +
theme_classic() +
theme(text = element_text(size = 8),
axis.text.x.bottom = element_text(size = 8, angle = 45, vjust = 1, hjust = 1),
# axis.ticks.x = element_blank(),
strip.text = element_text(size = 8, angle = 0, vjust = 0.7),
strip.background = element_blank(),
axis.title.x =  element_blank(),
strip.placement = "outside",
legend.position = "none",
legend.key.size = unit(0.2, "cm")) +
ylab("% of lymphoid")
head(dot_plot)
head(dot_sum)
dot_sum2 = uniquecombs(dot_data[, dot_factors], ordered = F); rownames(dot_sum2) = as.vector(dot_sum2$Mouse); dot_sum2 = dot_sum2[rownames(dot_sum1),]
head(dot_sum)
head(dot_sum2)
dot_data = data.frame(Mouse = MouseModel, ct = ct)
dot_factors = c("Mouse")
head(dot_data)
dot_sum1 = table(dot_data[,c("Mouse", "ct")])/rowSums(table(dot_data[,c("Mouse", "ct")]))*100
dot_sum1
attributes(dot_sum1)$class <- "matrix"
dot_sum1
dot_data
head(dot_data)
dot_sum1 = table(dot_data[,c("Mouse", "ct")])/rowSums(table(dot_data[,c("Mouse", "ct")]))*100
attributes(dot_sum1)$class <- "matrix"
dot_sum2 = uniquecombs(dot_data[, dot_factors], ordered = F)
dot_sum2
dot_sum1
rownames(dot_sum2) = as.vector(dot_sum2$Mouse)
dot_sum2
dot_sum1
dot_sum2 = dot_sum2[rownames(dot_sum1),]
dot_sum2
dot_sum1 = table(dot_data[,c("Mouse", "ct")])/rowSums(table(dot_data[,c("Mouse", "ct")]))*100
attributes(dot_sum1)$class <- "matrix"
dot_sum1
View(dot_sum1)
dot_sum2 = uniquecombs(dot_data[, dot_factors], ordered = F)
rownames(dot_sum2) = as.vector(dot_sum2$Mouse)
rownames(dot_sum1)
dot_sum2
rownames(dot_sum2) = as.vector(dot_sum2$Mouse)
dot_sum2
dot_sum2 = uniquecombs(dot_data[, dot_factors], ordered = F)
dot_sum2
colnames(dot_sum2)
colnames(dot_sum2) <- 'Mouse'
rownames(dot_sum2) = as.vector(dot_sum2$Mouse)
dot_sum2 = dot_sum2[rownames(dot_sum1),]
rownames(dot_sum2) = rownames(dot_sum1) = c()
dot_sum2
dot_sum = cbind(dot_sum1, dot_sum2)
dot_sum
# colnames(dot_sum)[0:(length(unique(seurat@active.ident))-1)] = paste0("ct_", colnames(dot_sum)[0:(length(unique(seurat@active.ident))-1)])
#dot_sum$Treatment = mapvalues(factor(dot_sum$Treatment, levels = c("UT","m1", "m2a")), from = c("UT","m1", "m2a"), to = c("Ctrl","m1", "m2a"))
dot_plot = melt(dot_sum)
dot_plot
MouseModel = as.vector(mouse_object$key[num_cells])
ct = as.vector(mouse_object@active.ident[num_cells])
dot_data = data.frame(Mouse = MouseModel, ct = ct)
dot_factors = c("Mouse")
dot_sum1 = table(dot_data[,c("Mouse", "ct")])/rowSums(table(dot_data[,c("Mouse", "ct")]))*100
attributes(dot_sum1)$class <- "matrix"
dot_sum2 = uniquecombs(dot_data[, dot_factors], ordered = F); colnames(dot_sum2) <- 'Mouse'; rownames(dot_sum2) = as.vector(dot_sum2$Mouse);dot_sum2 = dot_sum2[rownames(dot_sum1),]
dot_sum2
dot_sum1 = table(dot_data[,c("Mouse", "ct")])/rowSums(table(dot_data[,c("Mouse", "ct")]))*100
attributes(dot_sum1)$class <- "matrix"
dot_sum2 = uniquecombs(dot_data[, dot_factors], ordered = F); rownames(dot_sum2) = as.vector(dot_sum2$x);dot_sum2 = dot_sum2[rownames(dot_sum1),]
dot_sum2
rownames(dot_sum2)
rownames(dot_sum2) = rownames(dot_sum1) = c()
rownames(dot_sum2)
dot_sum2
MouseModel = as.vector(mouse_object$key[num_cells])
ct = as.vector(mouse_object@active.ident[num_cells])
dot_data = data.frame(Mouse = MouseModel, ct = ct)
dot_factors = c("Mouse")
dot_sum1 = table(dot_data[,c("Mouse", "ct")])/rowSums(table(dot_data[,c("Mouse", "ct")]))*100
attributes(dot_sum1)$class <- "matrix"
dot_sum2 = uniquecombs(dot_data[, dot_factors], ordered = F); rownames(dot_sum2) = as.vector(dot_sum2$x);dot_sum2 = dot_sum2[rownames(dot_sum1),]
rownames(dot_sum2) = rownames(dot_sum1) = c()
dot_sum = cbind(dot_sum1, dot_sum2)
# colnames(dot_sum)[0:(length(unique(seurat@active.ident))-1)] = paste0("ct_", colnames(dot_sum)[0:(length(unique(seurat@active.ident))-1)])
#dot_sum$Treatment = mapvalues(factor(dot_sum$Treatment, levels = c("UT","m1", "m2a")), from = c("UT","m1", "m2a"), to = c("Ctrl","m1", "m2a"))
dot_plot = melt(dot_sum1)
dot_sum_lymph = dot_sum1
dot_plot
ggplot(dot_plot[dot_plot$ct %in% dot_show,], aes(x = Mouse, y = value)) +
facet_wrap(. ~ variable,  strip.position = 'top', nrow = 1, scales = "free") +
stat_summary(aes(fill = Treatment), color = "black", fun = mean, geom = "bar", size = 0.5, width = 0.6) +
stat_summary(fun.data=mean_sdl, geom = "errorbar", width = 0.2, size = 0.3, color = "black") +
scale_fill_manual(values = c("grey90", "grey60", "grey20")) + #c("cornflowerblue", "orange", "red")
geom_point(size = 1.5, position = position_jitter(seed = 1, width = 0.2, height = 0), shape = 21, fill = "white") +
geom_signif(comparisons = list(c("m1", "m2a"), c("Ctrl", "m2a")), test = "t.test", map_signif_level = F, family = "serif", textsize = 2, step_increase = 0.15) +
theme_classic() +
theme(text = element_text(size = 8),
axis.text.x.bottom = element_text(size = 8, angle = 45, vjust = 1, hjust = 1),
# axis.ticks.x = element_blank(),
strip.text = element_text(size = 8, angle = 0, vjust = 0.7),
strip.background = element_blank(),
axis.title.x =  element_blank(),
strip.placement = "outside",
legend.position = "none",
legend.key.size = unit(0.2, "cm")) +
ylab("% of lymphoid")
MouseModel = as.vector(mouse_object$key[num_cells])
ct = as.vector(mouse_object@active.ident[num_cells])
dot_data = data.frame(Mouse = MouseModel, ct = ct)
dot_factors = c("Mouse")
dot_sum1 = table(dot_data[,c("Mouse", "ct")])/rowSums(table(dot_data[,c("Mouse", "ct")]))*100
attributes(dot_sum1)$class <- "matrix"
dot_sum2 = uniquecombs(dot_data[, dot_factors], ordered = F); rownames(dot_sum2) = as.vector(dot_sum2$x);dot_sum2 = dot_sum2[rownames(dot_sum1),]
dot_sum2
rownames(dot_sum2) = rownames(dot_sum1) = c()
dot_sum = cbind(dot_sum1, dot_sum2)
dot_sum
colnames(dot_sum) <- c('c3', 'c4', 'model')
# colnames(dot_sum)[0:(length(unique(seurat@active.ident))-1)] = paste0("ct_", colnames(dot_sum)[0:(length(unique(seurat@active.ident))-1)])
#dot_sum$Treatment = mapvalues(factor(dot_sum$Treatment, levels = c("UT","m1", "m2a")), from = c("UT","m1", "m2a"), to = c("Ctrl","m1", "m2a"))
dot_plot = melt(dot_sum)
dot_sum_lymph = dot_sum1
dot_sum_lymph = dot_sum
dot_plot
MouseModel = as.vector(mouse_object$key[num_cells])
ct = as.vector(mouse_object@active.ident[num_cells])
dot_data = data.frame(Mouse = MouseModel, ct = ct)
dot_factors = c("Mouse")
dot_sum1 = table(dot_data[,c("Mouse", "ct")])/rowSums(table(dot_data[,c("Mouse", "ct")]))*100
attributes(dot_sum1)$class <- "matrix"
dot_sum2 = uniquecombs(dot_data[, dot_factors], ordered = F); rownames(dot_sum2) = as.vector(dot_sum2$x);dot_sum2 = dot_sum2[rownames(dot_sum1),]
rownames(dot_sum2) = rownames(dot_sum1) = c()
dot_sum = cbind(dot_sum1, dot_sum2)
colnames(dot_sum) <- c('c3', 'c4', 'model')
# colnames(dot_sum)[0:(length(unique(seurat@active.ident))-1)] = paste0("ct_", colnames(dot_sum)[0:(length(unique(seurat@active.ident))-1)])
#dot_sum$Treatment = mapvalues(factor(dot_sum$Treatment, levels = c("UT","m1", "m2a")), from = c("UT","m1", "m2a"), to = c("Ctrl","m1", "m2a"))
dot_plot = melt(dot_sum)
dot_sum_lymph = dot_sum
dot_show = c("c3", "c4")
dot_plot
dot_sum
?melt
