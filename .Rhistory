rm(list = ls())
# load libraries
library(data.table)
library(Seurat)
library(SeuratDisk)
BiocManager::install('cellchat')
library(cellchat)
BiocManager::install('CellChat')
devtools::install_github("sqjin/CellChat")
library(CellChat)
renv::install(sqjin/CellChat)
renv::install("sqjin/CellChat")
library(CellChat)
library(patchwork)
#############################################
load("fapcm_fibroblasts_v6_clean_regulons.rds")
#############################################
load("./outs/h5ads/fapcm_fibroblasts_v6_clean_regulons.rds")
#############################################
mouseObjs <- load("./outs/h5ads/fapcm_fibroblasts_v6_clean_regulons.rds")
#############################################
mouseObjs <- readRDS("./outs/h5ads/fapcm_fibroblasts_v6_clean_regulons.rds")
View(mouseObjs)
#############################################
mouseObjs <- readRDS("./outs/h5ads/fapcm_fibroblasts_v6_clean.rds")
View(mouseObjs)
#############################################
mouseObjs <- readRDS("./outs/h5ads/prostate_mouse_loda.rds")
View(mouseObjs)
mouseObjs@int_colData
#############################################
mouseObjs <- readRDS("./outs/h5ads/fapcm_fibroblasts_v6_clean_regulons_4 .rds")
View(mouseObjs)
#############################################
mouseObjs <- readRDS("./outs/h5ads/fapcm_fibroblasts_v6_clean.rds")
View(mouseObjs)
# clean workspace
rm(list = ls())
# load libraries
library(data.table)
library(Seurat)
library(SeuratDisk)
library(CellChat)
library(patchwork)
#############################################
mouseObjs <- readRDS("./outs/h5ads/fapcm_fibroblasts_v6_clean_regulons.rds")
ad <- import("anndata", convert = FALSE)
library(reticulate)
ad <- import("anndata", convert = FALSE)
?reticulate
options(reticulate.conda_binary = "/Users/mohamedomar/opt/anaconda3/envs/mo")
options(reticulate.conda_binary = "/Users/mohamedomar/opt/anaconda3/envs/pathml")
ad <- import("anndata", convert = FALSE)
?import
ad <- import("anndata", convert = FALSE, path = '/Users/mohamedomar/opt/anaconda3/envs/pathml')
ad <- import_from_path("anndata", convert = FALSE, path = '/Users/mohamedomar/opt/anaconda3/envs/pathml')
conda_list()
options(reticulate.conda_binary = "/Users/mohamedomar/opt/anaconda3/envs/pathml2")
conda_list()
options(reticulate.conda_binary = "/Users/mohamedomar/opt/anaconda3/envs/pathml2")
conda_list()
options(reticulate.conda_binary = "/Users/mohamedomar/opt/anaconda3/envs/scutils/bin/python")
conda_list()
options(RETICULATE_PYTHON = "/Users/mohamedomar/opt/anaconda3/envs/scutils/bin/python")
conda_list()
ad <- import("anndata", convert = FALSE))
ad <- import("anndata", convert = FALSE)
options(reticulate.conda_binary = "/Users/mohamedomar/opt/anaconda3/envs/scutils/bin")
conda_list()
use_condaenv(scutils, required = TRUE)
?use_condaenv
use_condaenv(condaenv = scutils, required = TRUE)
use_condaenv(condaenv = "scutils", required = TRUE)
use_condaenv(condaenv = "scutils", required = TRUE)
options(reticulate.conda_binary = "/Users/mohamedomar/opt/anaconda3/")
use_condaenv(condaenv = "scutils", required = TRUE)
use_condaenv(conda = "/Users/mohamedomar/opt/anaconda3/", condaenv = "scutils", required = TRUE)
# clean workspace
rm(list = ls())
library(data.table)
library(Seurat)
library(SeuratDisk)
library(CellChat)
library(patchwork)
library(reticulate)
use_condaenv(condaenv = "scutils", required = TRUE)
ad <- import("anndata", convert = FALSE)
adata_mouse <- ad$read_h5ad("outs/h5ads/fapcm_fibroblasts_v6_clean_regulons_5.h5ad")
# access normalized data matrix
mouse_dataInput <- t(py_to_r(adata_mouse$X))
rownames(mouse_dataInput) <- rownames(py_to_r(adata_mouse$var))
colnames(mouse_dataInput) <- rownames(py_to_r(adata_mouse$obs))
adata_mouse
# access meta data
mouse_metaData <- py_to_r(adata_mouse$obs)
mouse_meta <- mouse_metaData
View(mouse_meta)
View(mouse_dataInput)
View(mouse_meta)
#############################################
# creat a cellchat object
cellchat_mouse <- createCellChat(object = mouse_dataInput, meta = mouse_meta, group.by = "cluster")
table(mouse_meta$cluster)
mouse_meta$cluster <- as.character(mouse_meta$cluster)
table(mouse_meta$cluster)
#############################################
# creat a cellchat object
cellchat_mouse <- createCellChat(object = mouse_dataInput, meta = mouse_meta, group.by = "cluster")
class(mouse_meta$cluster)
mouse_meta <- mouse_metaData
class(mouse_meta$cluster)
mouse_meta$cluster <- paste0("c", mouse_meta$cluster)
table(mouse_meta$cluster)
mouse_meta <- mouse_meta[!(mouse_meta$cluster == 'cNA'), ]
View(mouse_meta)
mouse_dataInput <- mouse_dataInput[, rownames(mouse_meta)]
dim(mouse_dataInput)
#############################################
# creat a cellchat object
cellchat_mouse <- createCellChat(object = mouse_dataInput, meta = mouse_meta, group.by = "cluster")
View(cellchat_mouse)
# Add cell information into meta slot of the object (Optional)
cellchat_mouse <- addMeta(cellchat_mouse, meta = mouse_meta)
cellchat_mouse <- setIdent(cellchat_mouse, ident.use = "cluster") # set "labels" as default cell identity
levels(cellchat_mouse@idents) # show factor levels of the cell labels
groupSize <- as.numeric(table(cellchat_mouse@idents)) # number of cells in each cell group
groupSize
# Set the ligand-receptor interaction database
CellChatDB <- CellChatDB.mouse
showDatabaseCategory(CellChatDB)
# Show the structure of the database
dplyr::glimpse(CellChatDB$interaction)
# set the used database in the object
cellchat_mouse@DB <- CellChatDB.use
# set the used database in the object
CellChatDB.use <- CellChatDB
cellchat_mouse@DB <- CellChatDB.use
#################################################
# Preprocessing the expression data for cell-cell communication analysis
# subset the expression data of signaling genes for saving computation cost
cellchat_mouse <- subsetData(cellchat_mouse) # This step is necessary even if using the whole database
future::plan("multiprocess", workers = 10) # do parallel
cellchat_mouse <- identifyOverExpressedGenes(cellchat_mouse)
library(future)
?plan
future::plan("multicore", workers = 5) # do parallel
cellchat_mouse <- identifyOverExpressedGenes(cellchat_mouse)
cellchat_mouse <- identifyOverExpressedInteractions(cellchat_mouse)
# project gene expression data onto PPI network (optional)
cellchat_mouse <- projectData(cellchat_mouse, PPI.mouse)
# Compute the communication probability and infer cellular communication network
cellchat_mouse <- computeCommunProb(cellchat_mouse)
# Filter out the cell-cell communication if there are only few number of cells in certain cell groups
cellchat_mouse <- filterCommunication(cellchat_mouse, min.cells = 10)
warnings()
# clean workspace
rm(list = ls())
# load libraries
library(data.table)
library(Seurat)
library(SeuratDisk)
library(CellChat)
library(patchwork)
library(reticulate)
# set the active conda environment
use_condaenv(condaenv = "scutils", required = TRUE)
# load the anndata module
ad <- import("anndata", convert = FALSE)
# load the mouse h5ad object
adata_mouse <- ad$read_h5ad("outs/h5ads/fapcm_fibroblasts_v6_clean_regulons_5.h5ad")
# access normalized data matrix
mouse_dataInput <- t(py_to_r(adata_mouse$X))
mouse_dataInput
range(mouse_dataInput)
mouse_seurat <- readRDS("./outs/h5ads/fapcm_fibroblasts_v6_clean_regulons.rds")
data.input <- GetAssayData(mouse_seurat, assay = "RNA", slot = "data") # normalized data matrix
labels <- Idents(mouse_seurat)
labels
table(labels)
View(mouse_seurat)
mouse_seurat <- readRDS("./outs/h5ads/fapcm_fibroblasts_v6_clean.rds")
data.input <- GetAssayData(mouse_seurat, assay = "RNA", slot = "data") # normalized data matrix
View(mouse_seurat)
mouse_seurat <- readRDS("./outs/h5ads/fapcm_fibroblasts_v6_clean_regulons_4 .rds")
View(mouse_seurat)
mouse_seurat@meta.data[["batch"]]
table(mouse_seurat$batch)
data.input <- GetAssayData(mouse_seurat, assay = "RNA", slot = "data") # normalized data matrix
range()
range(data.input)
mouse_seurat <- readRDS("./outs/h5ads/prostate_mouse_loda.rds")
View(mouse_seurat)
# load the mouse h5ad object
adata_mouse <- ad$read_h5ad("outs/h5ads/fapcm_fibroblasts_v6_clean.h5ad")
# access normalized data matrix
mouse_dataInput <- t(py_to_r(adata_mouse$X))
range(mouse_dataInput)
# load the mouse h5ad object
adata_mouse <- ad$read_h5ad("outs/h5ads/fapcm_fibroblasts_v6.h5ad")
# access normalized data matrix
mouse_dataInput <- t(py_to_r(adata_mouse$X))
range(mouse_dataInput)
?computeCommunProb
# load the mouse h5ad object
adata_mouse <- ad$read_h5ad("outs/h5ads/fapcm_fibroblasts_v6.h5ad")
# access normalized data matrix
mouse_dataInput <- t(py_to_r(adata_mouse$raw))
# access normalized data matrix
mouse_dataInput <- t(py_to_r(adata_mouse)$raw)
# access normalized data matrix
mouse_dataInput <- t(py_to_r(adata_mouse$X$raw))
# access normalized data matrix
mouse_dataInput <- t(py_to_r(adata_mouse$raw$X))
?createCellChat
?computeCommunProb
View(mouse_seurat)
# clean workspace
rm(list = ls())
# load libraries
library(data.table)
library(Seurat)
library(SeuratDisk)
library(CellChat)
library(patchwork)
library(reticulate)
# set the active conda environment
use_condaenv(condaenv = "scutils", required = TRUE)
# load the anndata module
ad <- import("anndata", convert = FALSE)
# load the mouse h5ad object
adata_mouse <- ad$read_h5ad("./forCellChat/fapcm_fibroblasts_v6.h5ad")
# load the mouse h5ad object
adata_mouse <- ad$read_h5ad("./forCellChat/adata_mouse_norm.h5ad")
# access normalized data matrix
mouse_dataInput <- t(py_to_r(adata_mouse$X))
View(adata_mouse)
adata_mouse
# access normalized data matrix
mouse_dataInput <- t(py_to_r(adata_mouse$to_df))
# load the mouse h5ad object
adata_mouse <- ad$read_h5ad("./forCellChat/adata_mouse_norm.h5ad")
# access normalized data matrix
mouse_dataInput <- t(py_to_r(adata_mouse$X))
range(mouse_dataInput)
rownames(mouse_dataInput) <- rownames(py_to_r(adata_mouse$var))
colnames(mouse_dataInput) <- rownames(py_to_r(adata_mouse$obs))
## access meta data
mouse_metaData <- py_to_r(adata_mouse$obs)
mouse_meta <- mouse_metaData
# some cleaning
mouse_meta$cluster <- paste0("c", mouse_meta$cluster)
mouse_meta <- mouse_meta[!(mouse_meta$cluster == 'cNA'), ]
mouse_dataInput <- mouse_dataInput[, rownames(mouse_meta)]
#############################################
# creat a cellchat object
cellchat_mouse <- createCellChat(object = mouse_dataInput, meta = mouse_meta, group.by = "cluster")
# Add cell information into meta slot of the object (Optional)
cellchat_mouse <- addMeta(cellchat_mouse, meta = mouse_meta)
cellchat_mouse <- setIdent(cellchat_mouse, ident.use = "cluster") # set "labels" as default cell identity
levels(cellchat_mouse@idents) # show factor levels of the cell labels
groupSize <- as.numeric(table(cellchat_mouse@idents)) # number of cells in each cell group
# Set the ligand-receptor interaction database
CellChatDB <- CellChatDB.mouse
showDatabaseCategory(CellChatDB)
table(cellchat_mouse@idents)
# Set the ligand-receptor interaction database
CellChatDB <- CellChatDB.mouse
showDatabaseCategory(CellChatDB)
# Show the structure of the database
dplyr::glimpse(CellChatDB$interaction)
# set the used database in the object
CellChatDB.use <- CellChatDB
cellchat_mouse@DB <- CellChatDB.use
#################################################
# Preprocessing the expression data for cell-cell communication analysis
# subset the expression data of signaling genes for saving computation cost
cellchat_mouse <- subsetData(cellchat_mouse) # This step is necessary even if using the whole database
future::plan("multicore", workers = 5) # do parallel
cellchat_mouse <- identifyOverExpressedGenes(cellchat_mouse)
cellchat_mouse <- identifyOverExpressedInteractions(cellchat_mouse)
# project gene expression data onto PPI network (optional)
cellchat_mouse <- projectData(cellchat_mouse, PPI.mouse)
# Compute the communication probability and infer cellular communication network
cellchat_mouse <- computeCommunProb(cellchat_mouse)
# Filter out the cell-cell communication if there are only few number of cells in certain cell groups
cellchat_mouse <- filterCommunication(cellchat_mouse, min.cells = 10)
# Infer the cell-cell communication at a signaling pathway level
cellchat_mouse <- computeCommunProbPathway(cellchat_mouse)
# Calculate the aggregated cell-cell communication network
cellchat_mouse <- aggregateNet(cellchat_mouse)
#  visualize the aggregated cell-cell communication network:  the number of interactions or the total interaction strength (weights) between any two cell groups using circle plot.
groupSize <- as.numeric(table(cellchat_mouse@idents))
par(mfrow = c(1,2), xpd=TRUE)
netVisual_circle(cellchat_mouse@net$count, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Number of interactions")
netVisual_circle(cellchat_mouse@net$weight, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Interaction weights/strength")
###########
# examine the signaling sent from each cell group.
mat <- cellchat_mouse@net$weight
par(mfrow = c(3,4), xpd=TRUE)
###########
# examine the signaling sent from each cell group.
mat_mouse <- cellchat_mouse@net$weight
par(mfrow = c(3,4), xpd=TRUE)
for (i in 1:nrow(mat_mouse)) {
mat2 <- matrix(0, nrow = nrow(mat_mouse), ncol = ncol(mat_mouse), dimnames = dimnames(mat_mouse))
mat2[i, ] <- mat_mouse[i, ]
netVisual_circle(mat2, vertex.weight = groupSize, weight.scale = T, edge.weight.max = max(mat_mouse), title.name = rownames(mat_mouse)[i])
}
View(mat2)
View(mat2)
View(mat_mouse)
View(mat)
## Get the dataframes of communications at the L/R level
df.net_mouse <- subsetCommunication(cellchat_mouse)
## Get the dataframes of communications at the pathway level
df.net_mouse_pathway <- subsetCommunication(cellchat_mouse, slot.name = "netP")
View(df.net_mouse)
View(df.net_mouse_pathway)
table(df.net_mouse_pathway$pathway_name)
# Visualization of cell-cell communication network
pathways.show <- c("WNT", "ncWNT")
# Hierarchy plot
# Here we define `vertex.receive` so that the left portion of the hierarchy plot shows signaling to fibroblast and the right portion shows signaling to immune cells
vertex.receiver = seq(1,4) # a numeric vector.
netVisual_aggregate(cellchat_mouse, signaling = pathways.show,  vertex.receiver = vertex.receiver)
# Visualization of cell-cell communication network
pathways.show <- c("WNT", "ncWNT")
# Hierarchy plot
# Here we define `vertex.receive` so that the left portion of the hierarchy plot shows signaling to fibroblast and the right portion shows signaling to immune cells
vertex.receiver = seq(1,4) # a numeric vector.
netVisual_aggregate(cellchat_mouse, signaling = pathways.show,  vertex.receiver = vertex.receiver)
graphics.off()
pathways.show <- c("WNT", "ncWNT")
# Hierarchy plot
# Here we define `vertex.receive` so that the left portion of the hierarchy plot shows signaling to fibroblast and the right portion shows signaling to immune cells
vertex.receiver = seq(1,4) # a numeric vector.
netVisual_aggregate(cellchat_mouse, signaling = pathways.show,  vertex.receiver = vertex.receiver)
# Visualization of cell-cell communication network
pathways.show <- c("WNT")
# Hierarchy plot
# Here we define `vertex.receive` so that the left portion of the hierarchy plot shows signaling to fibroblast and the right portion shows signaling to immune cells
vertex.receiver = seq(1,4) # a numeric vector.
netVisual_aggregate(cellchat_mouse, signaling = pathways.show,  vertex.receiver = vertex.receiver)
?netVisual_aggregate
netVisual_aggregate(cellchat_mouse, signaling = pathways.show,  vertex.receiver = vertex.receiver, layout = 'hierarchy')
# Hierarchy plot
# Here we define `vertex.receive` so that the left portion of the hierarchy plot shows signaling to fibroblast and the right portion shows signaling to immune cells
vertex.receiver = seq(3,4) # a numeric vector.
netVisual_aggregate(cellchat_mouse, signaling = pathways.show,  vertex.receiver = vertex.receiver, layout = 'hierarchy')
# Hierarchy plot
# Here we define `vertex.receive` so that the left portion of the hierarchy plot shows signaling to fibroblast and the right portion shows signaling to immune cells
vertex.receiver = seq(4,5) # a numeric vector.
netVisual_aggregate(cellchat_mouse, signaling = pathways.show,  vertex.receiver = vertex.receiver, layout = 'hierarchy')
View(cellchat_mouse)
View(df.net_mouse)
cellchat_mouse@idents
table(cellchat_mouse@idents)
# Hierarchy plot
# Here we define `vertex.receive` so that the left portion of the hierarchy plot shows signaling to fibroblast and the right portion shows signaling to immune cells
vertex.receiver = seq(1,2) # a numeric vector.
netVisual_aggregate(cellchat_mouse, signaling = pathways.show,  vertex.receiver = vertex.receiver, layout = 'hierarchy')
# Hierarchy plot
# Here we define `vertex.receive` so that the left portion of the hierarchy plot shows signaling to fibroblast and the right portion shows signaling to immune cells
vertex.receiver = seq(1) # a numeric vector.
netVisual_aggregate(cellchat_mouse, signaling = pathways.show, vertex.receiver = vertex.receiver, layout = 'hierarchy')
# Hierarchy plot
# Here we define `vertex.receive` so that the left portion of the hierarchy plot shows signaling to fibroblast and the right portion shows signaling to immune cells
vertex.receiver = seq(1,2) # a numeric vector.
netVisual_aggregate(cellchat_mouse, signaling = pathways.show, vertex.receiver = vertex.receiver, layout = 'hierarchy')
# Hierarchy plot
# Here we define `vertex.receive` so that the left portion of the hierarchy plot shows signaling to fibroblast and the right portion shows signaling to immune cells
vertex.receiver = seq(4,5) # a numeric vector.
netVisual_aggregate(cellchat_mouse, signaling = pathways.show, vertex.receiver = vertex.receiver, layout = 'hierarchy')
# Circle plot
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse, signaling = pathways.show, layout = "circle")
# Chord diagram
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse, signaling = pathways.show, layout = "chord")
# all the pathways
table(df.net_mouse_pathway$pathway_name)
# Visualization of cell-cell communication network
pathways.show <- c("ncWNT")
# Hierarchy plot
# Here we define `vertex.receive` so that the left portion of the hierarchy plot shows signaling to fibroblast and the right portion shows signaling to immune cells
vertex.receiver = seq(4,5) # a numeric vector.
netVisual_aggregate(cellchat_mouse, signaling = pathways.show, vertex.receiver = vertex.receiver, layout = 'hierarchy')
# Chord diagram
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse, signaling = pathways.show, layout = "chord")
netVisual_heatmap(cellchat_mouse, signaling = pathways.show, color.heatmap = "Reds")
# Heatmap
par(mfrow=c(1,1))
netVisual_heatmap(cellchat_mouse, signaling = pathways.show, color.heatmap = "Reds")
# Visualization of cell-cell communication network
pathways.show <- c("FGF")
# Hierarchy plot
# Here we define `vertex.receive` so that the left portion of the hierarchy plot shows signaling to fibroblast and the right portion shows signaling to immune cells
vertex.receiver = seq(4,5) # a numeric vector.
netVisual_aggregate(cellchat_mouse, signaling = pathways.show, vertex.receiver = vertex.receiver, layout = 'hierarchy')
netVisual_aggregate(cellchat_mouse, signaling = pathways.show, layout = "chord")
# Chord diagram
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse, signaling = pathways.show, layout = "chord")
# Visualization of cell-cell communication network
pathways.show <- c("VCAM")
# Hierarchy plot
# Here we define `vertex.receive` so that the left portion of the hierarchy plot shows signaling to fibroblast and the right portion shows signaling to immune cells
vertex.receiver = seq(4,5) # a numeric vector.
netVisual_aggregate(cellchat_mouse, signaling = pathways.show, vertex.receiver = vertex.receiver, layout = 'hierarchy')
# Circle plot
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse, signaling = pathways.show, layout = "circle")
# Chord diagram
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse, signaling = pathways.show, layout = "chord")
# Visualization of cell-cell communication network
pathways.show <- c("TGFb")
# Hierarchy plot
# Here we define `vertex.receive` so that the left portion of the hierarchy plot shows signaling to fibroblast and the right portion shows signaling to immune cells
vertex.receiver = seq(6,7, 8) # a numeric vector.
netVisual_aggregate(cellchat_mouse, signaling = pathways.show, vertex.receiver = vertex.receiver, layout = 'hierarchy')
# Visualization of cell-cell communication network
pathways.show <- c("TGFb")
# Hierarchy plot
# Here we define `vertex.receive` so that the left portion of the hierarchy plot shows signaling to fibroblast and the right portion shows signaling to immune cells
vertex.receiver = seq(6,7,8) # a numeric vector.
netVisual_aggregate(cellchat_mouse, signaling = pathways.show, vertex.receiver = vertex.receiver, layout = 'hierarchy')
# Hierarchy plot
# Here we define `vertex.receive` so that the left portion of the hierarchy plot shows signaling to fibroblast and the right portion shows signaling to immune cells
vertex.receiver = seq(6,7) # a numeric vector.
netVisual_aggregate(cellchat_mouse, signaling = pathways.show, vertex.receiver = vertex.receiver, layout = 'hierarchy')
# Hierarchy plot
# Here we define `vertex.receive` so that the left portion of the hierarchy plot shows signaling to fibroblast and the right portion shows signaling to immune cells
vertex.receiver = seq(6,7, 8) # a numeric vector.
# Chord diagram
par(mfrow=c(1,1))
netVisual_aggregate(cellchat_mouse, signaling = pathways.show, layout = "chord")
# Chord diagram by cell
group.cellType <- c(rep("FIB", 4), rep("DC", 4), rep("TC", 4)) # grouping cell clusters into fibroblast, DC and TC cells
group.cellType
graphics.off()
graphics.off()
library(data.table)
library(readxl)
library(ggplot2)
library(patchwork)
rm(list = ls())
1442/8980
2541/8980
310/8980
903/8980
733/8980
997/8980
895/8980
753/8980
934/8628
2231/8628
54/8628
189/8628
95/8628
62/8628
4029/8628
520/8628
1442/8574
2541/8574
310/8574
903/8574
733/8574
997/8574
895/8574
753/8574
1151/8628
2558/8628
68/8628
152/8628
59/8628
3976/8628
514/8628
